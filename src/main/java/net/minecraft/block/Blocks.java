/*
 * Decompiled with CFR 0.2.2 (FabricMC 7c48b8c4).
 * 
 * Could not load the following classes:
 *  org.jetbrains.annotations.Nullable
 */
package net.minecraft.block;

import java.util.function.Function;
import java.util.function.ToIntFunction;
import net.minecraft.block.AbstractBlock;
import net.minecraft.block.AirBlock;
import net.minecraft.block.AmethystBlock;
import net.minecraft.block.AmethystClusterBlock;
import net.minecraft.block.AnvilBlock;
import net.minecraft.block.AttachedStemBlock;
import net.minecraft.block.AzaleaBlock;
import net.minecraft.block.BambooBlock;
import net.minecraft.block.BambooShootBlock;
import net.minecraft.block.BannerBlock;
import net.minecraft.block.BarrelBlock;
import net.minecraft.block.BarrierBlock;
import net.minecraft.block.BeaconBlock;
import net.minecraft.block.BedBlock;
import net.minecraft.block.BeehiveBlock;
import net.minecraft.block.BeetrootsBlock;
import net.minecraft.block.BellBlock;
import net.minecraft.block.BigDripleafBlock;
import net.minecraft.block.BigDripleafStemBlock;
import net.minecraft.block.BlastFurnaceBlock;
import net.minecraft.block.Block;
import net.minecraft.block.BlockKeys;
import net.minecraft.block.BlockSetType;
import net.minecraft.block.BlockState;
import net.minecraft.block.BrewingStandBlock;
import net.minecraft.block.BrushableBlock;
import net.minecraft.block.BubbleColumnBlock;
import net.minecraft.block.BuddingAmethystBlock;
import net.minecraft.block.BulbBlock;
import net.minecraft.block.ButtonBlock;
import net.minecraft.block.CactusBlock;
import net.minecraft.block.CakeBlock;
import net.minecraft.block.CalibratedSculkSensorBlock;
import net.minecraft.block.CampfireBlock;
import net.minecraft.block.CandleBlock;
import net.minecraft.block.CandleCakeBlock;
import net.minecraft.block.CarpetBlock;
import net.minecraft.block.CarrotsBlock;
import net.minecraft.block.CartographyTableBlock;
import net.minecraft.block.CarvedPumpkinBlock;
import net.minecraft.block.CauldronBlock;
import net.minecraft.block.CaveVines;
import net.minecraft.block.CaveVinesBodyBlock;
import net.minecraft.block.CaveVinesHeadBlock;
import net.minecraft.block.ChainBlock;
import net.minecraft.block.CherryLeavesBlock;
import net.minecraft.block.ChestBlock;
import net.minecraft.block.ChiseledBookshelfBlock;
import net.minecraft.block.ChorusFlowerBlock;
import net.minecraft.block.ChorusPlantBlock;
import net.minecraft.block.CobwebBlock;
import net.minecraft.block.CocoaBlock;
import net.minecraft.block.ColoredFallingBlock;
import net.minecraft.block.CommandBlock;
import net.minecraft.block.ComparatorBlock;
import net.minecraft.block.ComposterBlock;
import net.minecraft.block.ConcretePowderBlock;
import net.minecraft.block.ConduitBlock;
import net.minecraft.block.CoralBlock;
import net.minecraft.block.CoralBlockBlock;
import net.minecraft.block.CoralFanBlock;
import net.minecraft.block.CoralWallFanBlock;
import net.minecraft.block.CrafterBlock;
import net.minecraft.block.CraftingTableBlock;
import net.minecraft.block.CropBlock;
import net.minecraft.block.CryingObsidianBlock;
import net.minecraft.block.DaylightDetectorBlock;
import net.minecraft.block.DeadBushBlock;
import net.minecraft.block.DeadCoralBlock;
import net.minecraft.block.DeadCoralFanBlock;
import net.minecraft.block.DeadCoralWallFanBlock;
import net.minecraft.block.DecoratedPotBlock;
import net.minecraft.block.DetectorRailBlock;
import net.minecraft.block.DirtPathBlock;
import net.minecraft.block.DispenserBlock;
import net.minecraft.block.DoorBlock;
import net.minecraft.block.DragonEggBlock;
import net.minecraft.block.DropperBlock;
import net.minecraft.block.DyedCarpetBlock;
import net.minecraft.block.EnchantingTableBlock;
import net.minecraft.block.EndGatewayBlock;
import net.minecraft.block.EndPortalBlock;
import net.minecraft.block.EndPortalFrameBlock;
import net.minecraft.block.EndRodBlock;
import net.minecraft.block.EnderChestBlock;
import net.minecraft.block.ExperienceDroppingBlock;
import net.minecraft.block.FarmlandBlock;
import net.minecraft.block.FenceBlock;
import net.minecraft.block.FenceGateBlock;
import net.minecraft.block.FireBlock;
import net.minecraft.block.FletchingTableBlock;
import net.minecraft.block.FlowerBlock;
import net.minecraft.block.FlowerPotBlock;
import net.minecraft.block.FlowerbedBlock;
import net.minecraft.block.FluidBlock;
import net.minecraft.block.FrogspawnBlock;
import net.minecraft.block.FrostedIceBlock;
import net.minecraft.block.FungusBlock;
import net.minecraft.block.FurnaceBlock;
import net.minecraft.block.GlazedTerracottaBlock;
import net.minecraft.block.GlowLichenBlock;
import net.minecraft.block.GrassBlock;
import net.minecraft.block.GrateBlock;
import net.minecraft.block.GrindstoneBlock;
import net.minecraft.block.HangingRootsBlock;
import net.minecraft.block.HangingSignBlock;
import net.minecraft.block.HayBlock;
import net.minecraft.block.HeavyCoreBlock;
import net.minecraft.block.HoneyBlock;
import net.minecraft.block.HopperBlock;
import net.minecraft.block.IceBlock;
import net.minecraft.block.InfestedBlock;
import net.minecraft.block.JigsawBlock;
import net.minecraft.block.JukeboxBlock;
import net.minecraft.block.KelpBlock;
import net.minecraft.block.KelpPlantBlock;
import net.minecraft.block.LadderBlock;
import net.minecraft.block.LanternBlock;
import net.minecraft.block.LavaCauldronBlock;
import net.minecraft.block.LeavesBlock;
import net.minecraft.block.LecternBlock;
import net.minecraft.block.LeveledCauldronBlock;
import net.minecraft.block.LeverBlock;
import net.minecraft.block.LightBlock;
import net.minecraft.block.LightningRodBlock;
import net.minecraft.block.LilyPadBlock;
import net.minecraft.block.LoomBlock;
import net.minecraft.block.MagmaBlock;
import net.minecraft.block.MangroveLeavesBlock;
import net.minecraft.block.MangroveRootsBlock;
import net.minecraft.block.MapColor;
import net.minecraft.block.MossBlock;
import net.minecraft.block.MudBlock;
import net.minecraft.block.MushroomBlock;
import net.minecraft.block.MushroomPlantBlock;
import net.minecraft.block.MyceliumBlock;
import net.minecraft.block.NetherPortalBlock;
import net.minecraft.block.NetherWartBlock;
import net.minecraft.block.NetherrackBlock;
import net.minecraft.block.NoteBlock;
import net.minecraft.block.NyliumBlock;
import net.minecraft.block.ObserverBlock;
import net.minecraft.block.Oxidizable;
import net.minecraft.block.OxidizableBlock;
import net.minecraft.block.OxidizableBulbBlock;
import net.minecraft.block.OxidizableDoorBlock;
import net.minecraft.block.OxidizableGrateBlock;
import net.minecraft.block.OxidizableSlabBlock;
import net.minecraft.block.OxidizableStairsBlock;
import net.minecraft.block.OxidizableTrapdoorBlock;
import net.minecraft.block.PaneBlock;
import net.minecraft.block.PillarBlock;
import net.minecraft.block.PistonBlock;
import net.minecraft.block.PistonExtensionBlock;
import net.minecraft.block.PistonHeadBlock;
import net.minecraft.block.PitcherCropBlock;
import net.minecraft.block.PlayerSkullBlock;
import net.minecraft.block.PointedDripstoneBlock;
import net.minecraft.block.PotatoesBlock;
import net.minecraft.block.PowderSnowBlock;
import net.minecraft.block.PoweredRailBlock;
import net.minecraft.block.PressurePlateBlock;
import net.minecraft.block.PropaguleBlock;
import net.minecraft.block.PumpkinBlock;
import net.minecraft.block.RailBlock;
import net.minecraft.block.RedstoneBlock;
import net.minecraft.block.RedstoneLampBlock;
import net.minecraft.block.RedstoneOreBlock;
import net.minecraft.block.RedstoneTorchBlock;
import net.minecraft.block.RedstoneWireBlock;
import net.minecraft.block.RepeaterBlock;
import net.minecraft.block.RespawnAnchorBlock;
import net.minecraft.block.RootedDirtBlock;
import net.minecraft.block.RootsBlock;
import net.minecraft.block.RotatedInfestedBlock;
import net.minecraft.block.SaplingBlock;
import net.minecraft.block.SaplingGenerator;
import net.minecraft.block.ScaffoldingBlock;
import net.minecraft.block.SculkBlock;
import net.minecraft.block.SculkCatalystBlock;
import net.minecraft.block.SculkSensorBlock;
import net.minecraft.block.SculkShriekerBlock;
import net.minecraft.block.SculkVeinBlock;
import net.minecraft.block.SeaPickleBlock;
import net.minecraft.block.SeagrassBlock;
import net.minecraft.block.ShortPlantBlock;
import net.minecraft.block.ShulkerBoxBlock;
import net.minecraft.block.SignBlock;
import net.minecraft.block.SkullBlock;
import net.minecraft.block.SlabBlock;
import net.minecraft.block.SlimeBlock;
import net.minecraft.block.SmallDripleafBlock;
import net.minecraft.block.SmithingTableBlock;
import net.minecraft.block.SmokerBlock;
import net.minecraft.block.SnifferEggBlock;
import net.minecraft.block.SnowBlock;
import net.minecraft.block.SnowyBlock;
import net.minecraft.block.SoulFireBlock;
import net.minecraft.block.SoulSandBlock;
import net.minecraft.block.SpawnerBlock;
import net.minecraft.block.SpongeBlock;
import net.minecraft.block.SporeBlossomBlock;
import net.minecraft.block.SproutsBlock;
import net.minecraft.block.StainedGlassBlock;
import net.minecraft.block.StainedGlassPaneBlock;
import net.minecraft.block.StairsBlock;
import net.minecraft.block.StemBlock;
import net.minecraft.block.StonecutterBlock;
import net.minecraft.block.StructureBlock;
import net.minecraft.block.StructureVoidBlock;
import net.minecraft.block.SugarCaneBlock;
import net.minecraft.block.SweetBerryBushBlock;
import net.minecraft.block.TallFlowerBlock;
import net.minecraft.block.TallPlantBlock;
import net.minecraft.block.TallSeagrassBlock;
import net.minecraft.block.TargetBlock;
import net.minecraft.block.TintedGlassBlock;
import net.minecraft.block.TntBlock;
import net.minecraft.block.TorchBlock;
import net.minecraft.block.TorchflowerBlock;
import net.minecraft.block.TranslucentBlock;
import net.minecraft.block.TransparentBlock;
import net.minecraft.block.TrapdoorBlock;
import net.minecraft.block.TrappedChestBlock;
import net.minecraft.block.TrialSpawnerBlock;
import net.minecraft.block.TripwireBlock;
import net.minecraft.block.TripwireHookBlock;
import net.minecraft.block.TurtleEggBlock;
import net.minecraft.block.TwistingVinesBlock;
import net.minecraft.block.TwistingVinesPlantBlock;
import net.minecraft.block.VaultBlock;
import net.minecraft.block.VineBlock;
import net.minecraft.block.WallBannerBlock;
import net.minecraft.block.WallBlock;
import net.minecraft.block.WallHangingSignBlock;
import net.minecraft.block.WallPiglinHeadBlock;
import net.minecraft.block.WallPlayerSkullBlock;
import net.minecraft.block.WallRedstoneTorchBlock;
import net.minecraft.block.WallSignBlock;
import net.minecraft.block.WallSkullBlock;
import net.minecraft.block.WallTorchBlock;
import net.minecraft.block.WallWitherSkullBlock;
import net.minecraft.block.WearableCarvedPumpkinBlock;
import net.minecraft.block.WeepingVinesBlock;
import net.minecraft.block.WeepingVinesPlantBlock;
import net.minecraft.block.WeightedPressurePlateBlock;
import net.minecraft.block.WetSpongeBlock;
import net.minecraft.block.WitherRoseBlock;
import net.minecraft.block.WitherSkullBlock;
import net.minecraft.block.WoodType;
import net.minecraft.block.cauldron.CauldronBehavior;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.block.entity.ShulkerBoxBlockEntity;
import net.minecraft.block.enums.BedPart;
import net.minecraft.block.enums.NoteBlockInstrument;
import net.minecraft.block.enums.SculkSensorPhase;
import net.minecraft.block.piston.PistonBehavior;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.fluid.Fluids;
import net.minecraft.item.ItemKeys;
import net.minecraft.particle.ParticleTypes;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.registry.RegistryKey;
import net.minecraft.sound.BlockSoundGroup;
import net.minecraft.sound.SoundEvents;
import net.minecraft.state.property.Properties;
import net.minecraft.util.ColorCode;
import net.minecraft.util.DyeColor;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.intprovider.ConstantIntProvider;
import net.minecraft.util.math.intprovider.UniformIntProvider;
import net.minecraft.world.BlockView;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.feature.TreeConfiguredFeatures;
import org.jetbrains.annotations.Nullable;

public class Blocks {
    private static final AbstractBlock.ContextPredicate SHULKER_BOX_SUFFOCATES_PREDICATE = (state, world, pos) -> {
        BlockEntity lv = world.getBlockEntity(pos);
        if (lv instanceof ShulkerBoxBlockEntity) {
            ShulkerBoxBlockEntity lv2 = (ShulkerBoxBlockEntity)lv;
            return lv2.suffocates();
        }
        return true;
    };
    public static final Block AIR = Blocks.register("air", (Block)new AirBlock(AbstractBlock.Settings.create().replaceable().noCollision().dropsNothing().air()));
    public static final Block STONE = Blocks.register("stone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block GRANITE = Blocks.register("granite", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block POLISHED_GRANITE = Blocks.register("polished_granite", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block DIORITE = Blocks.register("diorite", new Block(AbstractBlock.Settings.create().mapColor(MapColor.OFF_WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block POLISHED_DIORITE = Blocks.register("polished_diorite", new Block(AbstractBlock.Settings.create().mapColor(MapColor.OFF_WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block ANDESITE = Blocks.register("andesite", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block POLISHED_ANDESITE = Blocks.register("polished_andesite", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block GRASS_BLOCK = Blocks.register("grass_block", (Block)new GrassBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_GREEN).ticksRandomly().strength(0.6f).sounds(BlockSoundGroup.GRASS)));
    public static final Block DIRT = Blocks.register("dirt", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).strength(0.5f).sounds(BlockSoundGroup.GRAVEL)));
    public static final Block COARSE_DIRT = Blocks.register("coarse_dirt", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).strength(0.5f).sounds(BlockSoundGroup.GRAVEL)));
    public static final Block PODZOL = Blocks.register("podzol", (Block)new SnowyBlock(AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).strength(0.5f).sounds(BlockSoundGroup.GRAVEL)));
    public static final Block COBBLESTONE = Blocks.register("cobblestone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block OAK_PLANKS = Blocks.register("oak_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block SPRUCE_PLANKS = Blocks.register("spruce_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BIRCH_PLANKS = Blocks.register("birch_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block JUNGLE_PLANKS = Blocks.register("jungle_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block ACACIA_PLANKS = Blocks.register("acacia_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block CHERRY_PLANKS = Blocks.register("cherry_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.CHERRY_WOOD).burnable()));
    public static final Block DARK_OAK_PLANKS = Blocks.register("dark_oak_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block MANGROVE_PLANKS = Blocks.register("mangrove_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BAMBOO_PLANKS = Blocks.register("bamboo_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.BAMBOO_WOOD).burnable()));
    public static final Block BAMBOO_MOSAIC = Blocks.register("bamboo_mosaic", new Block(AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.BAMBOO_WOOD).burnable()));
    public static final Block OAK_SAPLING = Blocks.register("oak_sapling", (Block)new SaplingBlock(SaplingGenerator.OAK, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SPRUCE_SAPLING = Blocks.register("spruce_sapling", (Block)new SaplingBlock(SaplingGenerator.SPRUCE, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BIRCH_SAPLING = Blocks.register("birch_sapling", (Block)new SaplingBlock(SaplingGenerator.BIRCH, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block JUNGLE_SAPLING = Blocks.register("jungle_sapling", (Block)new SaplingBlock(SaplingGenerator.JUNGLE, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ACACIA_SAPLING = Blocks.register("acacia_sapling", (Block)new SaplingBlock(SaplingGenerator.ACACIA, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CHERRY_SAPLING = Blocks.register("cherry_sapling", (Block)new SaplingBlock(SaplingGenerator.CHERRY, AbstractBlock.Settings.create().mapColor(MapColor.PINK).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CHERRY_SAPLING).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DARK_OAK_SAPLING = Blocks.register("dark_oak_sapling", (Block)new SaplingBlock(SaplingGenerator.DARK_OAK, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block MANGROVE_PROPAGULE = Blocks.register("mangrove_propagule", (Block)new PropaguleBlock(SaplingGenerator.MANGROVE, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BEDROCK = Blocks.register("bedrock", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).strength(-1.0f, 3600000.0f).dropsNothing().allowsSpawning(Blocks::never)));
    public static final Block WATER = Blocks.register("water", (Block)new FluidBlock(Fluids.WATER, AbstractBlock.Settings.create().mapColor(MapColor.WATER_BLUE).replaceable().noCollision().strength(100.0f).pistonBehavior(PistonBehavior.DESTROY).dropsNothing().liquid().sounds(BlockSoundGroup.INTENTIONALLY_EMPTY)));
    public static final Block LAVA = Blocks.register("lava", (Block)new FluidBlock(Fluids.LAVA, AbstractBlock.Settings.create().mapColor(MapColor.BRIGHT_RED).replaceable().noCollision().ticksRandomly().strength(100.0f).luminance(state -> 15).pistonBehavior(PistonBehavior.DESTROY).dropsNothing().liquid().sounds(BlockSoundGroup.INTENTIONALLY_EMPTY)));
    public static final Block SAND = Blocks.register("sand", (Block)new ColoredFallingBlock(new ColorCode(14406560), AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block SUSPICIOUS_SAND = Blocks.register("suspicious_sand", (Block)new BrushableBlock(SAND, SoundEvents.ITEM_BRUSH_BRUSHING_SAND, SoundEvents.ITEM_BRUSH_BRUSHING_SAND_COMPLETE, AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.SNARE).strength(0.25f).sounds(BlockSoundGroup.SUSPICIOUS_SAND).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block RED_SAND = Blocks.register("red_sand", (Block)new ColoredFallingBlock(new ColorCode(11098145), AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block GRAVEL = Blocks.register("gravel", (Block)new ColoredFallingBlock(new ColorCode(-8356741), AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.SNARE).strength(0.6f).sounds(BlockSoundGroup.GRAVEL)));
    public static final Block SUSPICIOUS_GRAVEL = Blocks.register("suspicious_gravel", (Block)new BrushableBlock(GRAVEL, SoundEvents.ITEM_BRUSH_BRUSHING_GRAVEL, SoundEvents.ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE, AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.SNARE).strength(0.25f).sounds(BlockSoundGroup.SUSPICIOUS_GRAVEL).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block GOLD_ORE = Blocks.register("gold_ore", (Block)new ExperienceDroppingBlock(ConstantIntProvider.create(0), AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 3.0f)));
    public static final Block DEEPSLATE_GOLD_ORE = Blocks.register("deepslate_gold_ore", (Block)new ExperienceDroppingBlock(ConstantIntProvider.create(0), AbstractBlock.Settings.copyShallow(GOLD_ORE).mapColor(MapColor.DEEPSLATE_GRAY).strength(4.5f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block IRON_ORE = Blocks.register("iron_ore", (Block)new ExperienceDroppingBlock(ConstantIntProvider.create(0), AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 3.0f)));
    public static final Block DEEPSLATE_IRON_ORE = Blocks.register("deepslate_iron_ore", (Block)new ExperienceDroppingBlock(ConstantIntProvider.create(0), AbstractBlock.Settings.copyShallow(IRON_ORE).mapColor(MapColor.DEEPSLATE_GRAY).strength(4.5f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block COAL_ORE = Blocks.register("coal_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(0, 2), AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 3.0f)));
    public static final Block DEEPSLATE_COAL_ORE = Blocks.register("deepslate_coal_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(0, 2), AbstractBlock.Settings.copyShallow(COAL_ORE).mapColor(MapColor.DEEPSLATE_GRAY).strength(4.5f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block NETHER_GOLD_ORE = Blocks.register("nether_gold_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(0, 1), AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 3.0f).sounds(BlockSoundGroup.NETHER_GOLD_ORE)));
    public static final Block OAK_LOG = Blocks.register("oak_log", Blocks.createLogBlock(MapColor.OAK_TAN, MapColor.SPRUCE_BROWN));
    public static final Block SPRUCE_LOG = Blocks.register("spruce_log", Blocks.createLogBlock(MapColor.SPRUCE_BROWN, MapColor.BROWN));
    public static final Block BIRCH_LOG = Blocks.register("birch_log", Blocks.createLogBlock(MapColor.PALE_YELLOW, MapColor.OFF_WHITE));
    public static final Block JUNGLE_LOG = Blocks.register("jungle_log", Blocks.createLogBlock(MapColor.DIRT_BROWN, MapColor.SPRUCE_BROWN));
    public static final Block ACACIA_LOG = Blocks.register("acacia_log", Blocks.createLogBlock(MapColor.ORANGE, MapColor.STONE_GRAY));
    public static final Block CHERRY_LOG = Blocks.register("cherry_log", Blocks.createLogBlock(MapColor.TERRACOTTA_WHITE, MapColor.TERRACOTTA_GRAY, BlockSoundGroup.CHERRY_WOOD));
    public static final Block DARK_OAK_LOG = Blocks.register("dark_oak_log", Blocks.createLogBlock(MapColor.BROWN, MapColor.BROWN));
    public static final Block MANGROVE_LOG = Blocks.register("mangrove_log", Blocks.createLogBlock(MapColor.RED, MapColor.SPRUCE_BROWN));
    public static final Block MANGROVE_ROOTS = Blocks.register("mangrove_roots", (Block)new MangroveRootsBlock(AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).instrument(NoteBlockInstrument.BASS).strength(0.7f).sounds(BlockSoundGroup.MANGROVE_ROOTS).nonOpaque().suffocates(Blocks::never).blockVision(Blocks::never).nonOpaque().burnable()));
    public static final Block MUDDY_MANGROVE_ROOTS = Blocks.register("muddy_mangrove_roots", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).strength(0.7f).sounds(BlockSoundGroup.MUDDY_MANGROVE_ROOTS)));
    public static final Block BAMBOO_BLOCK = Blocks.register("bamboo_block", Blocks.createLogBlock(MapColor.YELLOW, MapColor.DARK_GREEN, BlockSoundGroup.BAMBOO_WOOD));
    public static final Block STRIPPED_SPRUCE_LOG = Blocks.register("stripped_spruce_log", Blocks.createLogBlock(MapColor.SPRUCE_BROWN, MapColor.SPRUCE_BROWN));
    public static final Block STRIPPED_BIRCH_LOG = Blocks.register("stripped_birch_log", Blocks.createLogBlock(MapColor.PALE_YELLOW, MapColor.PALE_YELLOW));
    public static final Block STRIPPED_JUNGLE_LOG = Blocks.register("stripped_jungle_log", Blocks.createLogBlock(MapColor.DIRT_BROWN, MapColor.DIRT_BROWN));
    public static final Block STRIPPED_ACACIA_LOG = Blocks.register("stripped_acacia_log", Blocks.createLogBlock(MapColor.ORANGE, MapColor.ORANGE));
    public static final Block STRIPPED_CHERRY_LOG = Blocks.register("stripped_cherry_log", Blocks.createLogBlock(MapColor.TERRACOTTA_WHITE, MapColor.TERRACOTTA_PINK, BlockSoundGroup.CHERRY_WOOD));
    public static final Block STRIPPED_DARK_OAK_LOG = Blocks.register("stripped_dark_oak_log", Blocks.createLogBlock(MapColor.BROWN, MapColor.BROWN));
    public static final Block STRIPPED_OAK_LOG = Blocks.register("stripped_oak_log", Blocks.createLogBlock(MapColor.OAK_TAN, MapColor.OAK_TAN));
    public static final Block STRIPPED_MANGROVE_LOG = Blocks.register("stripped_mangrove_log", Blocks.createLogBlock(MapColor.RED, MapColor.RED));
    public static final Block STRIPPED_BAMBOO_BLOCK = Blocks.register("stripped_bamboo_block", Blocks.createLogBlock(MapColor.YELLOW, MapColor.YELLOW, BlockSoundGroup.BAMBOO_WOOD));
    public static final Block OAK_WOOD = Blocks.register("oak_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block SPRUCE_WOOD = Blocks.register("spruce_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BIRCH_WOOD = Blocks.register("birch_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block JUNGLE_WOOD = Blocks.register("jungle_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block ACACIA_WOOD = Blocks.register("acacia_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block CHERRY_WOOD = Blocks.register("cherry_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_GRAY).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.CHERRY_WOOD).burnable()));
    public static final Block DARK_OAK_WOOD = Blocks.register("dark_oak_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block MANGROVE_WOOD = Blocks.register("mangrove_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block STRIPPED_OAK_WOOD = Blocks.register("stripped_oak_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block STRIPPED_SPRUCE_WOOD = Blocks.register("stripped_spruce_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block STRIPPED_BIRCH_WOOD = Blocks.register("stripped_birch_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block STRIPPED_JUNGLE_WOOD = Blocks.register("stripped_jungle_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block STRIPPED_ACACIA_WOOD = Blocks.register("stripped_acacia_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block STRIPPED_CHERRY_WOOD = Blocks.register("stripped_cherry_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_PINK).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.CHERRY_WOOD).burnable()));
    public static final Block STRIPPED_DARK_OAK_WOOD = Blocks.register("stripped_dark_oak_wood", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block STRIPPED_MANGROVE_WOOD = Blocks.register("stripped_mangrove_wood", Blocks.createLogBlock(MapColor.RED, MapColor.RED));
    public static final Block OAK_LEAVES = Blocks.register("oak_leaves", Blocks.createLeavesBlock(BlockSoundGroup.GRASS));
    public static final Block SPRUCE_LEAVES = Blocks.register("spruce_leaves", Blocks.createLeavesBlock(BlockSoundGroup.GRASS));
    public static final Block BIRCH_LEAVES = Blocks.register("birch_leaves", Blocks.createLeavesBlock(BlockSoundGroup.GRASS));
    public static final Block JUNGLE_LEAVES = Blocks.register("jungle_leaves", Blocks.createLeavesBlock(BlockSoundGroup.GRASS));
    public static final Block ACACIA_LEAVES = Blocks.register("acacia_leaves", Blocks.createLeavesBlock(BlockSoundGroup.GRASS));
    public static final Block CHERRY_LEAVES = Blocks.register("cherry_leaves", (Block)new CherryLeavesBlock(AbstractBlock.Settings.create().mapColor(MapColor.PINK).strength(0.2f).ticksRandomly().sounds(BlockSoundGroup.CHERRY_LEAVES).nonOpaque().allowsSpawning(Blocks::canSpawnOnLeaves).suffocates(Blocks::never).blockVision(Blocks::never).burnable().pistonBehavior(PistonBehavior.DESTROY).solidBlock(Blocks::never)));
    public static final Block DARK_OAK_LEAVES = Blocks.register("dark_oak_leaves", Blocks.createLeavesBlock(BlockSoundGroup.GRASS));
    public static final Block MANGROVE_LEAVES = Blocks.register("mangrove_leaves", (Block)new MangroveLeavesBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).strength(0.2f).ticksRandomly().sounds(BlockSoundGroup.GRASS).nonOpaque().allowsSpawning(Blocks::canSpawnOnLeaves).suffocates(Blocks::never).blockVision(Blocks::never).burnable().pistonBehavior(PistonBehavior.DESTROY).solidBlock(Blocks::never)));
    public static final Block AZALEA_LEAVES = Blocks.register("azalea_leaves", Blocks.createLeavesBlock(BlockSoundGroup.AZALEA_LEAVES));
    public static final Block FLOWERING_AZALEA_LEAVES = Blocks.register("flowering_azalea_leaves", Blocks.createLeavesBlock(BlockSoundGroup.AZALEA_LEAVES));
    public static final Block SPONGE = Blocks.register("sponge", (Block)new SpongeBlock(AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).strength(0.6f).sounds(BlockSoundGroup.SPONGE)));
    public static final Block WET_SPONGE = Blocks.register("wet_sponge", (Block)new WetSpongeBlock(AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).strength(0.6f).sounds(BlockSoundGroup.WET_SPONGE)));
    public static final Block GLASS = Blocks.register("glass", (Block)new TransparentBlock(AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque().allowsSpawning(Blocks::never).solidBlock(Blocks::never).suffocates(Blocks::never).blockVision(Blocks::never)));
    public static final Block LAPIS_ORE = Blocks.register("lapis_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(2, 5), AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 3.0f)));
    public static final Block DEEPSLATE_LAPIS_ORE = Blocks.register("deepslate_lapis_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(2, 5), AbstractBlock.Settings.copyShallow(LAPIS_ORE).mapColor(MapColor.DEEPSLATE_GRAY).strength(4.5f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block LAPIS_BLOCK = Blocks.register("lapis_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.LAPIS_BLUE).requiresTool().strength(3.0f, 3.0f)));
    public static final Block DISPENSER = Blocks.register("dispenser", (Block)new DispenserBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.5f)));
    public static final Block SANDSTONE = Blocks.register("sandstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.8f)));
    public static final Block CHISELED_SANDSTONE = Blocks.register("chiseled_sandstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.8f)));
    public static final Block CUT_SANDSTONE = Blocks.register("cut_sandstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.8f)));
    public static final Block NOTE_BLOCK = Blocks.register("note_block", (Block)new NoteBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).sounds(BlockSoundGroup.WOOD).strength(0.8f).burnable()));
    public static final Block WHITE_BED = Blocks.register("white_bed", Blocks.createBedBlock(DyeColor.WHITE));
    public static final Block ORANGE_BED = Blocks.register("orange_bed", Blocks.createBedBlock(DyeColor.ORANGE));
    public static final Block MAGENTA_BED = Blocks.register("magenta_bed", Blocks.createBedBlock(DyeColor.MAGENTA));
    public static final Block LIGHT_BLUE_BED = Blocks.register("light_blue_bed", Blocks.createBedBlock(DyeColor.LIGHT_BLUE));
    public static final Block YELLOW_BED = Blocks.register("yellow_bed", Blocks.createBedBlock(DyeColor.YELLOW));
    public static final Block LIME_BED = Blocks.register("lime_bed", Blocks.createBedBlock(DyeColor.LIME));
    public static final Block PINK_BED = Blocks.register("pink_bed", Blocks.createBedBlock(DyeColor.PINK));
    public static final Block GRAY_BED = Blocks.register("gray_bed", Blocks.createBedBlock(DyeColor.GRAY));
    public static final Block LIGHT_GRAY_BED = Blocks.register("light_gray_bed", Blocks.createBedBlock(DyeColor.LIGHT_GRAY));
    public static final Block CYAN_BED = Blocks.register("cyan_bed", Blocks.createBedBlock(DyeColor.CYAN));
    public static final Block PURPLE_BED = Blocks.register("purple_bed", Blocks.createBedBlock(DyeColor.PURPLE));
    public static final Block BLUE_BED = Blocks.register("blue_bed", Blocks.createBedBlock(DyeColor.BLUE));
    public static final Block BROWN_BED = Blocks.register("brown_bed", Blocks.createBedBlock(DyeColor.BROWN));
    public static final Block GREEN_BED = Blocks.register("green_bed", Blocks.createBedBlock(DyeColor.GREEN));
    public static final Block RED_BED = Blocks.register("red_bed", Blocks.createBedBlock(DyeColor.RED));
    public static final Block BLACK_BED = Blocks.register("black_bed", Blocks.createBedBlock(DyeColor.BLACK));
    public static final Block POWERED_RAIL = Blocks.register("powered_rail", (Block)new PoweredRailBlock(AbstractBlock.Settings.create().noCollision().strength(0.7f).sounds(BlockSoundGroup.METAL)));
    public static final Block DETECTOR_RAIL = Blocks.register("detector_rail", (Block)new DetectorRailBlock(AbstractBlock.Settings.create().noCollision().strength(0.7f).sounds(BlockSoundGroup.METAL)));
    public static final Block STICKY_PISTON = Blocks.register("sticky_piston", Blocks.createPistonBlock(true));
    public static final Block COBWEB = Blocks.register("cobweb", (Block)new CobwebBlock(AbstractBlock.Settings.create().mapColor(MapColor.WHITE_GRAY).sounds(BlockSoundGroup.COBWEB).solid().noCollision().requiresTool().strength(4.0f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SHORT_GRASS = Blocks.register("short_grass", (Block)new ShortPlantBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XYZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block FERN = Blocks.register("fern", (Block)new ShortPlantBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XYZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DEAD_BUSH = Blocks.register("dead_bush", (Block)new DeadBushBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SEAGRASS = Blocks.register("seagrass", (Block)new SeagrassBlock(AbstractBlock.Settings.create().mapColor(MapColor.WATER_BLUE).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block TALL_SEAGRASS = Blocks.register("tall_seagrass", (Block)new TallSeagrassBlock(AbstractBlock.Settings.create().mapColor(MapColor.WATER_BLUE).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PISTON = Blocks.register("piston", Blocks.createPistonBlock(false));
    public static final Block PISTON_HEAD = Blocks.register("piston_head", (Block)new PistonHeadBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).strength(1.5f).dropsNothing().pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block WHITE_WOOL = Blocks.register("white_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.WHITE).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block ORANGE_WOOL = Blocks.register("orange_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block MAGENTA_WOOL = Blocks.register("magenta_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.MAGENTA).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block LIGHT_BLUE_WOOL = Blocks.register("light_blue_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block YELLOW_WOOL = Blocks.register("yellow_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block LIME_WOOL = Blocks.register("lime_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.LIME).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block PINK_WOOL = Blocks.register("pink_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PINK).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block GRAY_WOOL = Blocks.register("gray_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block LIGHT_GRAY_WOOL = Blocks.register("light_gray_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_GRAY).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block CYAN_WOOL = Blocks.register("cyan_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.CYAN).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block PURPLE_WOOL = Blocks.register("purple_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block BLUE_WOOL = Blocks.register("blue_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BLUE).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block BROWN_WOOL = Blocks.register("brown_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BROWN).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block GREEN_WOOL = Blocks.register("green_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GREEN).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block RED_WOOL = Blocks.register("red_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block BLACK_WOOL = Blocks.register("black_wool", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).instrument(NoteBlockInstrument.GUITAR).strength(0.8f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block MOVING_PISTON = Blocks.register("moving_piston", (Block)new PistonExtensionBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).solid().strength(-1.0f).dynamicBounds().dropsNothing().nonOpaque().solidBlock(Blocks::never).suffocates(Blocks::never).blockVision(Blocks::never).pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block DANDELION = Blocks.register("dandelion", (Block)new FlowerBlock(StatusEffects.SATURATION, 0.35f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block TORCHFLOWER = Blocks.register("torchflower", (Block)new FlowerBlock(StatusEffects.NIGHT_VISION, 5.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block POPPY = Blocks.register("poppy", (Block)new FlowerBlock(StatusEffects.NIGHT_VISION, 5.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BLUE_ORCHID = Blocks.register("blue_orchid", (Block)new FlowerBlock(StatusEffects.SATURATION, 0.35f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ALLIUM = Blocks.register("allium", (Block)new FlowerBlock(StatusEffects.FIRE_RESISTANCE, 4.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block AZURE_BLUET = Blocks.register("azure_bluet", (Block)new FlowerBlock(StatusEffects.BLINDNESS, 8.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block RED_TULIP = Blocks.register("red_tulip", (Block)new FlowerBlock(StatusEffects.WEAKNESS, 9.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ORANGE_TULIP = Blocks.register("orange_tulip", (Block)new FlowerBlock(StatusEffects.WEAKNESS, 9.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WHITE_TULIP = Blocks.register("white_tulip", (Block)new FlowerBlock(StatusEffects.WEAKNESS, 9.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PINK_TULIP = Blocks.register("pink_tulip", (Block)new FlowerBlock(StatusEffects.WEAKNESS, 9.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block OXEYE_DAISY = Blocks.register("oxeye_daisy", (Block)new FlowerBlock(StatusEffects.REGENERATION, 8.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CORNFLOWER = Blocks.register("cornflower", (Block)new FlowerBlock(StatusEffects.JUMP_BOOST, 6.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WITHER_ROSE = Blocks.register("wither_rose", (Block)new WitherRoseBlock(StatusEffects.WITHER, 8.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block LILY_OF_THE_VALLEY = Blocks.register("lily_of_the_valley", (Block)new FlowerBlock(StatusEffects.POISON, 12.0f, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BROWN_MUSHROOM = Blocks.register("brown_mushroom", (Block)new MushroomPlantBlock(TreeConfiguredFeatures.HUGE_BROWN_MUSHROOM, AbstractBlock.Settings.create().mapColor(MapColor.BROWN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).luminance(state -> 1).postProcess(Blocks::always).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block RED_MUSHROOM = Blocks.register("red_mushroom", (Block)new MushroomPlantBlock(TreeConfiguredFeatures.HUGE_RED_MUSHROOM, AbstractBlock.Settings.create().mapColor(MapColor.RED).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).postProcess(Blocks::always).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block GOLD_BLOCK = Blocks.register("gold_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GOLD).instrument(NoteBlockInstrument.BELL).requiresTool().strength(3.0f, 6.0f).sounds(BlockSoundGroup.METAL)));
    public static final Block IRON_BLOCK = Blocks.register("iron_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).instrument(NoteBlockInstrument.IRON_XYLOPHONE).requiresTool().strength(5.0f, 6.0f).sounds(BlockSoundGroup.METAL)));
    public static final Block BRICKS = Blocks.register("bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block TNT = Blocks.register("tnt", (Block)new TntBlock(AbstractBlock.Settings.create().mapColor(MapColor.BRIGHT_RED).breakInstantly().sounds(BlockSoundGroup.GRASS).burnable().solidBlock(Blocks::never)));
    public static final Block BOOKSHELF = Blocks.register("bookshelf", new Block(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(1.5f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block CHISELED_BOOKSHELF = Blocks.register("chiseled_bookshelf", (Block)new ChiseledBookshelfBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(1.5f).sounds(BlockSoundGroup.CHISELED_BOOKSHELF).burnable()));
    public static final Block MOSSY_COBBLESTONE = Blocks.register("mossy_cobblestone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block OBSIDIAN = Blocks.register("obsidian", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(50.0f, 1200.0f)));
    public static final Block TORCH = Blocks.register("torch", (Block)new TorchBlock(ParticleTypes.FLAME, AbstractBlock.Settings.create().noCollision().breakInstantly().luminance(state -> 14).sounds(BlockSoundGroup.WOOD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WALL_TORCH = Blocks.register("wall_torch", (Block)new WallTorchBlock(ParticleTypes.FLAME, AbstractBlock.Settings.create().noCollision().breakInstantly().luminance(state -> 14).sounds(BlockSoundGroup.WOOD).dropsLike(TORCH).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block FIRE = Blocks.register("fire", (Block)new FireBlock(AbstractBlock.Settings.create().mapColor(MapColor.BRIGHT_RED).replaceable().noCollision().breakInstantly().luminance(state -> 15).sounds(BlockSoundGroup.WOOL).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SOUL_FIRE = Blocks.register("soul_fire", (Block)new SoulFireBlock(AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE).replaceable().noCollision().breakInstantly().luminance(state -> 10).sounds(BlockSoundGroup.WOOL).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SPAWNER = Blocks.register("spawner", (Block)new SpawnerBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(5.0f).sounds(BlockSoundGroup.METAL).nonOpaque()));
    public static final Block OAK_STAIRS = Blocks.register("oak_stairs", Blocks.createOldStairsBlock(OAK_PLANKS));
    public static final Block CHEST = Blocks.register("chest", (Block)new ChestBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.5f).sounds(BlockSoundGroup.WOOD).burnable(), () -> BlockEntityType.CHEST));
    public static final Block REDSTONE_WIRE = Blocks.register("redstone_wire", (Block)new RedstoneWireBlock(AbstractBlock.Settings.create().noCollision().breakInstantly().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DIAMOND_ORE = Blocks.register("diamond_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(3, 7), AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 3.0f)));
    public static final Block DEEPSLATE_DIAMOND_ORE = Blocks.register("deepslate_diamond_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(3, 7), AbstractBlock.Settings.copyShallow(DIAMOND_ORE).mapColor(MapColor.DEEPSLATE_GRAY).strength(4.5f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block DIAMOND_BLOCK = Blocks.register("diamond_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DIAMOND_BLUE).requiresTool().strength(5.0f, 6.0f).sounds(BlockSoundGroup.METAL)));
    public static final Block CRAFTING_TABLE = Blocks.register("crafting_table", (Block)new CraftingTableBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.5f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block WHEAT = Blocks.register("wheat", (Block)new CropBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block FARMLAND = Blocks.register("farmland", (Block)new FarmlandBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).ticksRandomly().strength(0.6f).sounds(BlockSoundGroup.GRAVEL).blockVision(Blocks::always).suffocates(Blocks::always)));
    public static final Block FURNACE = Blocks.register("furnace", (Block)new FurnaceBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.5f).luminance(Blocks.createLightLevelFromLitBlockState(13))));
    public static final Block OAK_SIGN = Blocks.register("oak_sign", (Block)new SignBlock(WoodType.OAK, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block SPRUCE_SIGN = Blocks.register("spruce_sign", (Block)new SignBlock(WoodType.SPRUCE, AbstractBlock.Settings.create().mapColor(SPRUCE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block BIRCH_SIGN = Blocks.register("birch_sign", (Block)new SignBlock(WoodType.BIRCH, AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block ACACIA_SIGN = Blocks.register("acacia_sign", (Block)new SignBlock(WoodType.ACACIA, AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block CHERRY_SIGN = Blocks.register("cherry_sign", (Block)new SignBlock(WoodType.CHERRY, AbstractBlock.Settings.create().mapColor(CHERRY_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block JUNGLE_SIGN = Blocks.register("jungle_sign", (Block)new SignBlock(WoodType.JUNGLE, AbstractBlock.Settings.create().mapColor(JUNGLE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block DARK_OAK_SIGN = Blocks.register("dark_oak_sign", (Block)new SignBlock(WoodType.DARK_OAK, AbstractBlock.Settings.create().mapColor(DARK_OAK_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block MANGROVE_SIGN = Blocks.register("mangrove_sign", (Block)new SignBlock(WoodType.MANGROVE, AbstractBlock.Settings.create().mapColor(MANGROVE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block BAMBOO_SIGN = Blocks.register("bamboo_sign", (Block)new SignBlock(WoodType.BAMBOO, AbstractBlock.Settings.create().mapColor(BAMBOO_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block OAK_DOOR = Blocks.register("oak_door", (Block)new DoorBlock(BlockSetType.OAK, AbstractBlock.Settings.create().mapColor(OAK_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block LADDER = Blocks.register("ladder", (Block)new LadderBlock(AbstractBlock.Settings.create().notSolid().strength(0.4f).sounds(BlockSoundGroup.LADDER).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block RAIL = Blocks.register("rail", (Block)new RailBlock(AbstractBlock.Settings.create().noCollision().strength(0.7f).sounds(BlockSoundGroup.METAL)));
    public static final Block COBBLESTONE_STAIRS = Blocks.register("cobblestone_stairs", Blocks.createOldStairsBlock(COBBLESTONE));
    public static final Block OAK_WALL_SIGN = Blocks.register("oak_wall_sign", (Block)new WallSignBlock(WoodType.OAK, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(OAK_SIGN).burnable()));
    public static final Block SPRUCE_WALL_SIGN = Blocks.register("spruce_wall_sign", (Block)new WallSignBlock(WoodType.SPRUCE, AbstractBlock.Settings.create().mapColor(SPRUCE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(SPRUCE_SIGN).burnable()));
    public static final Block BIRCH_WALL_SIGN = Blocks.register("birch_wall_sign", (Block)new WallSignBlock(WoodType.BIRCH, AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(BIRCH_SIGN).burnable()));
    public static final Block ACACIA_WALL_SIGN = Blocks.register("acacia_wall_sign", (Block)new WallSignBlock(WoodType.ACACIA, AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(ACACIA_SIGN).burnable()));
    public static final Block CHERRY_WALL_SIGN = Blocks.register("cherry_wall_sign", (Block)new WallSignBlock(WoodType.CHERRY, AbstractBlock.Settings.create().mapColor(CHERRY_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(CHERRY_SIGN).burnable()));
    public static final Block JUNGLE_WALL_SIGN = Blocks.register("jungle_wall_sign", (Block)new WallSignBlock(WoodType.JUNGLE, AbstractBlock.Settings.create().mapColor(JUNGLE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(JUNGLE_SIGN).burnable()));
    public static final Block DARK_OAK_WALL_SIGN = Blocks.register("dark_oak_wall_sign", (Block)new WallSignBlock(WoodType.DARK_OAK, AbstractBlock.Settings.create().mapColor(DARK_OAK_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(DARK_OAK_SIGN).burnable()));
    public static final Block MANGROVE_WALL_SIGN = Blocks.register("mangrove_wall_sign", (Block)new WallSignBlock(WoodType.MANGROVE, AbstractBlock.Settings.create().mapColor(MANGROVE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(MANGROVE_SIGN).burnable()));
    public static final Block BAMBOO_WALL_SIGN = Blocks.register("bamboo_wall_sign", (Block)new WallSignBlock(WoodType.BAMBOO, AbstractBlock.Settings.create().mapColor(BAMBOO_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable().dropsLike(BAMBOO_SIGN)));
    public static final Block OAK_HANGING_SIGN = Blocks.register("oak_hanging_sign", (Block)new HangingSignBlock(WoodType.OAK, AbstractBlock.Settings.create().mapColor(OAK_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block SPRUCE_HANGING_SIGN = Blocks.register("spruce_hanging_sign", (Block)new HangingSignBlock(WoodType.SPRUCE, AbstractBlock.Settings.create().mapColor(SPRUCE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block BIRCH_HANGING_SIGN = Blocks.register("birch_hanging_sign", (Block)new HangingSignBlock(WoodType.BIRCH, AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block ACACIA_HANGING_SIGN = Blocks.register("acacia_hanging_sign", (Block)new HangingSignBlock(WoodType.ACACIA, AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block CHERRY_HANGING_SIGN = Blocks.register("cherry_hanging_sign", (Block)new HangingSignBlock(WoodType.CHERRY, AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_PINK).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block JUNGLE_HANGING_SIGN = Blocks.register("jungle_hanging_sign", (Block)new HangingSignBlock(WoodType.JUNGLE, AbstractBlock.Settings.create().mapColor(JUNGLE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block DARK_OAK_HANGING_SIGN = Blocks.register("dark_oak_hanging_sign", (Block)new HangingSignBlock(WoodType.DARK_OAK, AbstractBlock.Settings.create().mapColor(DARK_OAK_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block CRIMSON_HANGING_SIGN = Blocks.register("crimson_hanging_sign", (Block)new HangingSignBlock(WoodType.CRIMSON, AbstractBlock.Settings.create().mapColor(MapColor.DULL_PINK).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f)));
    public static final Block WARPED_HANGING_SIGN = Blocks.register("warped_hanging_sign", (Block)new HangingSignBlock(WoodType.WARPED, AbstractBlock.Settings.create().mapColor(MapColor.DARK_AQUA).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f)));
    public static final Block MANGROVE_HANGING_SIGN = Blocks.register("mangrove_hanging_sign", (Block)new HangingSignBlock(WoodType.MANGROVE, AbstractBlock.Settings.create().mapColor(MANGROVE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block BAMBOO_HANGING_SIGN = Blocks.register("bamboo_hanging_sign", (Block)new HangingSignBlock(WoodType.BAMBOO, AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable()));
    public static final Block OAK_WALL_HANGING_SIGN = Blocks.register("oak_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.OAK, AbstractBlock.Settings.create().mapColor(OAK_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable().dropsLike(OAK_HANGING_SIGN)));
    public static final Block SPRUCE_WALL_HANGING_SIGN = Blocks.register("spruce_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.SPRUCE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(SPRUCE_HANGING_SIGN).burnable()));
    public static final Block BIRCH_WALL_HANGING_SIGN = Blocks.register("birch_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.BIRCH, AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(BIRCH_HANGING_SIGN).burnable()));
    public static final Block ACACIA_WALL_HANGING_SIGN = Blocks.register("acacia_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.ACACIA, AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable().dropsLike(ACACIA_HANGING_SIGN)));
    public static final Block CHERRY_WALL_HANGING_SIGN = Blocks.register("cherry_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.CHERRY, AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_PINK).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable().dropsLike(CHERRY_HANGING_SIGN)));
    public static final Block JUNGLE_WALL_HANGING_SIGN = Blocks.register("jungle_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.JUNGLE, AbstractBlock.Settings.create().mapColor(JUNGLE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable().dropsLike(JUNGLE_HANGING_SIGN)));
    public static final Block DARK_OAK_WALL_HANGING_SIGN = Blocks.register("dark_oak_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.DARK_OAK, AbstractBlock.Settings.create().mapColor(DARK_OAK_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable().dropsLike(DARK_OAK_HANGING_SIGN)));
    public static final Block MANGROVE_WALL_HANGING_SIGN = Blocks.register("mangrove_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.MANGROVE, AbstractBlock.Settings.create().mapColor(MANGROVE_LOG.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable().dropsLike(MANGROVE_HANGING_SIGN)));
    public static final Block CRIMSON_WALL_HANGING_SIGN = Blocks.register("crimson_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.CRIMSON, AbstractBlock.Settings.create().mapColor(MapColor.DULL_PINK).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(CRIMSON_HANGING_SIGN)));
    public static final Block WARPED_WALL_HANGING_SIGN = Blocks.register("warped_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.WARPED, AbstractBlock.Settings.create().mapColor(MapColor.DARK_AQUA).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).dropsLike(WARPED_HANGING_SIGN)));
    public static final Block BAMBOO_WALL_HANGING_SIGN = Blocks.register("bamboo_wall_hanging_sign", (Block)new WallHangingSignBlock(WoodType.BAMBOO, AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).burnable().dropsLike(BAMBOO_HANGING_SIGN)));
    public static final Block LEVER = Blocks.register("lever", (Block)new LeverBlock(AbstractBlock.Settings.create().noCollision().strength(0.5f).sounds(BlockSoundGroup.STONE).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block STONE_PRESSURE_PLATE = Blocks.register("stone_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.STONE, AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().strength(0.5f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block IRON_DOOR = Blocks.register("iron_door", (Block)new DoorBlock(BlockSetType.IRON, AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).requiresTool().strength(5.0f).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block OAK_PRESSURE_PLATE = Blocks.register("oak_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.OAK, AbstractBlock.Settings.create().mapColor(OAK_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SPRUCE_PRESSURE_PLATE = Blocks.register("spruce_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.SPRUCE, AbstractBlock.Settings.create().mapColor(SPRUCE_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BIRCH_PRESSURE_PLATE = Blocks.register("birch_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.BIRCH, AbstractBlock.Settings.create().mapColor(BIRCH_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block JUNGLE_PRESSURE_PLATE = Blocks.register("jungle_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.JUNGLE, AbstractBlock.Settings.create().mapColor(JUNGLE_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ACACIA_PRESSURE_PLATE = Blocks.register("acacia_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.ACACIA, AbstractBlock.Settings.create().mapColor(ACACIA_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CHERRY_PRESSURE_PLATE = Blocks.register("cherry_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.CHERRY, AbstractBlock.Settings.create().mapColor(CHERRY_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DARK_OAK_PRESSURE_PLATE = Blocks.register("dark_oak_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.DARK_OAK, AbstractBlock.Settings.create().mapColor(DARK_OAK_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block MANGROVE_PRESSURE_PLATE = Blocks.register("mangrove_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.MANGROVE, AbstractBlock.Settings.create().mapColor(MANGROVE_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BAMBOO_PRESSURE_PLATE = Blocks.register("bamboo_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.BAMBOO, AbstractBlock.Settings.create().mapColor(BAMBOO_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block REDSTONE_ORE = Blocks.register("redstone_ore", (Block)new RedstoneOreBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().ticksRandomly().luminance(Blocks.createLightLevelFromLitBlockState(9)).strength(3.0f, 3.0f)));
    public static final Block DEEPSLATE_REDSTONE_ORE = Blocks.register("deepslate_redstone_ore", (Block)new RedstoneOreBlock(AbstractBlock.Settings.copyShallow(REDSTONE_ORE).mapColor(MapColor.DEEPSLATE_GRAY).strength(4.5f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block REDSTONE_TORCH = Blocks.register("redstone_torch", (Block)new RedstoneTorchBlock(AbstractBlock.Settings.create().noCollision().breakInstantly().luminance(Blocks.createLightLevelFromLitBlockState(7)).sounds(BlockSoundGroup.WOOD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block REDSTONE_WALL_TORCH = Blocks.register("redstone_wall_torch", (Block)new WallRedstoneTorchBlock(AbstractBlock.Settings.create().noCollision().breakInstantly().luminance(Blocks.createLightLevelFromLitBlockState(7)).sounds(BlockSoundGroup.WOOD).dropsLike(REDSTONE_TORCH).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block STONE_BUTTON = Blocks.register("stone_button", Blocks.createStoneButtonBlock());
    public static final Block SNOW = Blocks.register("snow", (Block)new SnowBlock(AbstractBlock.Settings.create().mapColor(MapColor.WHITE).replaceable().notSolid().ticksRandomly().strength(0.1f).requiresTool().sounds(BlockSoundGroup.SNOW).blockVision((state, world, pos) -> state.get(SnowBlock.LAYERS) >= 8).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ICE = Blocks.register("ice", (Block)new IceBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_PURPLE).slipperiness(0.98f).ticksRandomly().strength(0.5f).sounds(BlockSoundGroup.GLASS).nonOpaque().allowsSpawning((state, world, pos, entityType) -> entityType == EntityType.POLAR_BEAR).solidBlock(Blocks::never)));
    public static final Block SNOW_BLOCK = Blocks.register("snow_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.WHITE).requiresTool().strength(0.2f).sounds(BlockSoundGroup.SNOW)));
    public static final Block CACTUS = Blocks.register("cactus", (Block)new CactusBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).ticksRandomly().strength(0.4f).sounds(BlockSoundGroup.WOOL).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CLAY = Blocks.register("clay", new Block(AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE_GRAY).instrument(NoteBlockInstrument.FLUTE).strength(0.6f).sounds(BlockSoundGroup.GRAVEL)));
    public static final Block SUGAR_CANE = Blocks.register("sugar_cane", (Block)new SugarCaneBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block JUKEBOX = Blocks.register("jukebox", (Block)new JukeboxBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f, 6.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block OAK_FENCE = Blocks.register("oak_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(OAK_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block NETHERRACK = Blocks.register("netherrack", (Block)new NetherrackBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.4f).sounds(BlockSoundGroup.NETHERRACK)));
    public static final Block SOUL_SAND = Blocks.register("soul_sand", (Block)new SoulSandBlock(AbstractBlock.Settings.create().mapColor(MapColor.BROWN).instrument(NoteBlockInstrument.COW_BELL).strength(0.5f).velocityMultiplier(0.4f).sounds(BlockSoundGroup.SOUL_SAND).allowsSpawning(Blocks::always).solidBlock(Blocks::always).blockVision(Blocks::always).suffocates(Blocks::always)));
    public static final Block SOUL_SOIL = Blocks.register("soul_soil", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BROWN).strength(0.5f).sounds(BlockSoundGroup.SOUL_SOIL)));
    public static final Block BASALT = Blocks.register("basalt", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f).sounds(BlockSoundGroup.BASALT)));
    public static final Block POLISHED_BASALT = Blocks.register("polished_basalt", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f).sounds(BlockSoundGroup.BASALT)));
    public static final Block SOUL_TORCH = Blocks.register("soul_torch", (Block)new TorchBlock(ParticleTypes.SOUL_FIRE_FLAME, AbstractBlock.Settings.create().noCollision().breakInstantly().luminance(state -> 10).sounds(BlockSoundGroup.WOOD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SOUL_WALL_TORCH = Blocks.register("soul_wall_torch", (Block)new WallTorchBlock(ParticleTypes.SOUL_FIRE_FLAME, AbstractBlock.Settings.create().noCollision().breakInstantly().luminance(state -> 10).sounds(BlockSoundGroup.WOOD).dropsLike(SOUL_TORCH).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block GLOWSTONE = Blocks.register("glowstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.PLING).strength(0.3f).sounds(BlockSoundGroup.GLASS).luminance(state -> 15).solidBlock(Blocks::never)));
    public static final Block NETHER_PORTAL = Blocks.register("nether_portal", (Block)new NetherPortalBlock(AbstractBlock.Settings.create().noCollision().ticksRandomly().strength(-1.0f).sounds(BlockSoundGroup.GLASS).luminance(state -> 11).pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block CARVED_PUMPKIN = Blocks.register("carved_pumpkin", (Block)new WearableCarvedPumpkinBlock(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).strength(1.0f).sounds(BlockSoundGroup.WOOD).allowsSpawning(Blocks::always).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block JACK_O_LANTERN = Blocks.register("jack_o_lantern", (Block)new CarvedPumpkinBlock(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).strength(1.0f).sounds(BlockSoundGroup.WOOD).luminance(state -> 15).allowsSpawning(Blocks::always).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CAKE = Blocks.register("cake", (Block)new CakeBlock(AbstractBlock.Settings.create().solid().strength(0.5f).sounds(BlockSoundGroup.WOOL).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block REPEATER = Blocks.register("repeater", (Block)new RepeaterBlock(AbstractBlock.Settings.create().breakInstantly().sounds(BlockSoundGroup.STONE).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WHITE_STAINED_GLASS = Blocks.register("white_stained_glass", Blocks.createStainedGlassBlock(DyeColor.WHITE));
    public static final Block ORANGE_STAINED_GLASS = Blocks.register("orange_stained_glass", Blocks.createStainedGlassBlock(DyeColor.ORANGE));
    public static final Block MAGENTA_STAINED_GLASS = Blocks.register("magenta_stained_glass", Blocks.createStainedGlassBlock(DyeColor.MAGENTA));
    public static final Block LIGHT_BLUE_STAINED_GLASS = Blocks.register("light_blue_stained_glass", Blocks.createStainedGlassBlock(DyeColor.LIGHT_BLUE));
    public static final Block YELLOW_STAINED_GLASS = Blocks.register("yellow_stained_glass", Blocks.createStainedGlassBlock(DyeColor.YELLOW));
    public static final Block LIME_STAINED_GLASS = Blocks.register("lime_stained_glass", Blocks.createStainedGlassBlock(DyeColor.LIME));
    public static final Block PINK_STAINED_GLASS = Blocks.register("pink_stained_glass", Blocks.createStainedGlassBlock(DyeColor.PINK));
    public static final Block GRAY_STAINED_GLASS = Blocks.register("gray_stained_glass", Blocks.createStainedGlassBlock(DyeColor.GRAY));
    public static final Block LIGHT_GRAY_STAINED_GLASS = Blocks.register("light_gray_stained_glass", Blocks.createStainedGlassBlock(DyeColor.LIGHT_GRAY));
    public static final Block CYAN_STAINED_GLASS = Blocks.register("cyan_stained_glass", Blocks.createStainedGlassBlock(DyeColor.CYAN));
    public static final Block PURPLE_STAINED_GLASS = Blocks.register("purple_stained_glass", Blocks.createStainedGlassBlock(DyeColor.PURPLE));
    public static final Block BLUE_STAINED_GLASS = Blocks.register("blue_stained_glass", Blocks.createStainedGlassBlock(DyeColor.BLUE));
    public static final Block BROWN_STAINED_GLASS = Blocks.register("brown_stained_glass", Blocks.createStainedGlassBlock(DyeColor.BROWN));
    public static final Block GREEN_STAINED_GLASS = Blocks.register("green_stained_glass", Blocks.createStainedGlassBlock(DyeColor.GREEN));
    public static final Block RED_STAINED_GLASS = Blocks.register("red_stained_glass", Blocks.createStainedGlassBlock(DyeColor.RED));
    public static final Block BLACK_STAINED_GLASS = Blocks.register("black_stained_glass", Blocks.createStainedGlassBlock(DyeColor.BLACK));
    public static final Block OAK_TRAPDOOR = Blocks.register("oak_trapdoor", (Block)new TrapdoorBlock(BlockSetType.OAK, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never).burnable()));
    public static final Block SPRUCE_TRAPDOOR = Blocks.register("spruce_trapdoor", (Block)new TrapdoorBlock(BlockSetType.SPRUCE, AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never).burnable()));
    public static final Block BIRCH_TRAPDOOR = Blocks.register("birch_trapdoor", (Block)new TrapdoorBlock(BlockSetType.BIRCH, AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never).burnable()));
    public static final Block JUNGLE_TRAPDOOR = Blocks.register("jungle_trapdoor", (Block)new TrapdoorBlock(BlockSetType.JUNGLE, AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never).burnable()));
    public static final Block ACACIA_TRAPDOOR = Blocks.register("acacia_trapdoor", (Block)new TrapdoorBlock(BlockSetType.ACACIA, AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never).burnable()));
    public static final Block CHERRY_TRAPDOOR = Blocks.register("cherry_trapdoor", (Block)new TrapdoorBlock(BlockSetType.CHERRY, AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never).burnable()));
    public static final Block DARK_OAK_TRAPDOOR = Blocks.register("dark_oak_trapdoor", (Block)new TrapdoorBlock(BlockSetType.DARK_OAK, AbstractBlock.Settings.create().mapColor(MapColor.BROWN).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never).burnable()));
    public static final Block MANGROVE_TRAPDOOR = Blocks.register("mangrove_trapdoor", (Block)new TrapdoorBlock(BlockSetType.MANGROVE, AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never).burnable()));
    public static final Block BAMBOO_TRAPDOOR = Blocks.register("bamboo_trapdoor", (Block)new TrapdoorBlock(BlockSetType.BAMBOO, AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never).burnable()));
    public static final Block STONE_BRICKS = Blocks.register("stone_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block MOSSY_STONE_BRICKS = Blocks.register("mossy_stone_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block CRACKED_STONE_BRICKS = Blocks.register("cracked_stone_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block CHISELED_STONE_BRICKS = Blocks.register("chiseled_stone_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block PACKED_MUD = Blocks.register("packed_mud", new Block(AbstractBlock.Settings.copyShallow(DIRT).strength(1.0f, 3.0f).sounds(BlockSoundGroup.PACKED_MUD)));
    public static final Block MUD_BRICKS = Blocks.register("mud_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_LIGHT_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 3.0f).sounds(BlockSoundGroup.MUD_BRICKS)));
    public static final Block INFESTED_STONE = Blocks.register("infested_stone", (Block)new InfestedBlock(STONE, AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE_GRAY)));
    public static final Block INFESTED_COBBLESTONE = Blocks.register("infested_cobblestone", (Block)new InfestedBlock(COBBLESTONE, AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE_GRAY)));
    public static final Block INFESTED_STONE_BRICKS = Blocks.register("infested_stone_bricks", (Block)new InfestedBlock(STONE_BRICKS, AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE_GRAY)));
    public static final Block INFESTED_MOSSY_STONE_BRICKS = Blocks.register("infested_mossy_stone_bricks", (Block)new InfestedBlock(MOSSY_STONE_BRICKS, AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE_GRAY)));
    public static final Block INFESTED_CRACKED_STONE_BRICKS = Blocks.register("infested_cracked_stone_bricks", (Block)new InfestedBlock(CRACKED_STONE_BRICKS, AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE_GRAY)));
    public static final Block INFESTED_CHISELED_STONE_BRICKS = Blocks.register("infested_chiseled_stone_bricks", (Block)new InfestedBlock(CHISELED_STONE_BRICKS, AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE_GRAY)));
    public static final Block BROWN_MUSHROOM_BLOCK = Blocks.register("brown_mushroom_block", (Block)new MushroomBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).instrument(NoteBlockInstrument.BASS).strength(0.2f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block RED_MUSHROOM_BLOCK = Blocks.register("red_mushroom_block", (Block)new MushroomBlock(AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.BASS).strength(0.2f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block MUSHROOM_STEM = Blocks.register("mushroom_stem", (Block)new MushroomBlock(AbstractBlock.Settings.create().mapColor(MapColor.WHITE_GRAY).instrument(NoteBlockInstrument.BASS).strength(0.2f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block IRON_BARS = Blocks.register("iron_bars", (Block)new PaneBlock(AbstractBlock.Settings.create().requiresTool().strength(5.0f, 6.0f).sounds(BlockSoundGroup.METAL).nonOpaque()));
    public static final Block CHAIN = Blocks.register("chain", (Block)new ChainBlock(AbstractBlock.Settings.create().solid().requiresTool().strength(5.0f, 6.0f).sounds(BlockSoundGroup.CHAIN).nonOpaque()));
    public static final Block GLASS_PANE = Blocks.register("glass_pane", (Block)new PaneBlock(AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block PUMPKIN = Blocks.register(BlockKeys.PUMPKIN, (Block)new PumpkinBlock(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.DIDGERIDOO).strength(1.0f).sounds(BlockSoundGroup.WOOD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block MELON = Blocks.register(BlockKeys.MELON, new Block(AbstractBlock.Settings.create().mapColor(MapColor.LIME).strength(1.0f).sounds(BlockSoundGroup.WOOD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ATTACHED_PUMPKIN_STEM = Blocks.register(BlockKeys.ATTACHED_PUMPKIN_STEM, (Block)new AttachedStemBlock(BlockKeys.PUMPKIN_STEM, BlockKeys.PUMPKIN, ItemKeys.PUMPKIN_SEEDS, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.WOOD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ATTACHED_MELON_STEM = Blocks.register(BlockKeys.ATTACHED_MELON_STEM, (Block)new AttachedStemBlock(BlockKeys.MELON_STEM, BlockKeys.MELON, ItemKeys.MELON_SEEDS, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.WOOD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PUMPKIN_STEM = Blocks.register(BlockKeys.PUMPKIN_STEM, (Block)new StemBlock(BlockKeys.PUMPKIN, BlockKeys.ATTACHED_PUMPKIN_STEM, ItemKeys.PUMPKIN_SEEDS, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.STEM).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block MELON_STEM = Blocks.register(BlockKeys.MELON_STEM, (Block)new StemBlock(BlockKeys.MELON, BlockKeys.ATTACHED_MELON_STEM, ItemKeys.MELON_SEEDS, AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.STEM).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block VINE = Blocks.register("vine", (Block)new VineBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).replaceable().noCollision().ticksRandomly().strength(0.2f).sounds(BlockSoundGroup.VINE).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block GLOW_LICHEN = Blocks.register("glow_lichen", (Block)new GlowLichenBlock(AbstractBlock.Settings.create().mapColor(MapColor.LICHEN_GREEN).replaceable().noCollision().strength(0.2f).sounds(BlockSoundGroup.GLOW_LICHEN).luminance(GlowLichenBlock.getLuminanceSupplier(7)).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block OAK_FENCE_GATE = Blocks.register("oak_fence_gate", (Block)new FenceGateBlock(WoodType.OAK, AbstractBlock.Settings.create().mapColor(OAK_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable()));
    public static final Block BRICK_STAIRS = Blocks.register("brick_stairs", Blocks.createOldStairsBlock(BRICKS));
    public static final Block STONE_BRICK_STAIRS = Blocks.register("stone_brick_stairs", Blocks.createOldStairsBlock(STONE_BRICKS));
    public static final Block MUD_BRICK_STAIRS = Blocks.register("mud_brick_stairs", Blocks.createOldStairsBlock(MUD_BRICKS));
    public static final Block MYCELIUM = Blocks.register("mycelium", (Block)new MyceliumBlock(AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).ticksRandomly().strength(0.6f).sounds(BlockSoundGroup.GRASS)));
    public static final Block LILY_PAD = Blocks.register("lily_pad", (Block)new LilyPadBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).breakInstantly().sounds(BlockSoundGroup.LILY_PAD).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block NETHER_BRICKS = Blocks.register("nether_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f).sounds(BlockSoundGroup.NETHER_BRICKS)));
    public static final Block NETHER_BRICK_FENCE = Blocks.register("nether_brick_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f).sounds(BlockSoundGroup.NETHER_BRICKS)));
    public static final Block NETHER_BRICK_STAIRS = Blocks.register("nether_brick_stairs", Blocks.createOldStairsBlock(NETHER_BRICKS));
    public static final Block NETHER_WART = Blocks.register("nether_wart", (Block)new NetherWartBlock(AbstractBlock.Settings.create().mapColor(MapColor.RED).noCollision().ticksRandomly().sounds(BlockSoundGroup.NETHER_WART).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ENCHANTING_TABLE = Blocks.register("enchanting_table", (Block)new EnchantingTableBlock(AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().luminance(state -> 7).strength(5.0f, 1200.0f)));
    public static final Block BREWING_STAND = Blocks.register("brewing_stand", (Block)new BrewingStandBlock(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).requiresTool().strength(0.5f).luminance(state -> 1).nonOpaque()));
    public static final Block CAULDRON = Blocks.register("cauldron", (Block)new CauldronBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).requiresTool().strength(2.0f).nonOpaque()));
    public static final Block WATER_CAULDRON = Blocks.register("water_cauldron", (Block)new LeveledCauldronBlock(Biome.Precipitation.RAIN, CauldronBehavior.WATER_CAULDRON_BEHAVIOR, AbstractBlock.Settings.copyShallow(CAULDRON)));
    public static final Block LAVA_CAULDRON = Blocks.register("lava_cauldron", (Block)new LavaCauldronBlock(AbstractBlock.Settings.copyShallow(CAULDRON).luminance(state -> 15)));
    public static final Block POWDER_SNOW_CAULDRON = Blocks.register("powder_snow_cauldron", (Block)new LeveledCauldronBlock(Biome.Precipitation.SNOW, CauldronBehavior.POWDER_SNOW_CAULDRON_BEHAVIOR, AbstractBlock.Settings.copyShallow(CAULDRON)));
    public static final Block END_PORTAL = Blocks.register("end_portal", (Block)new EndPortalBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).noCollision().luminance(state -> 15).strength(-1.0f, 3600000.0f).dropsNothing().pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block END_PORTAL_FRAME = Blocks.register("end_portal_frame", (Block)new EndPortalFrameBlock(AbstractBlock.Settings.create().mapColor(MapColor.GREEN).instrument(NoteBlockInstrument.BASEDRUM).sounds(BlockSoundGroup.GLASS).luminance(state -> 1).strength(-1.0f, 3600000.0f).dropsNothing()));
    public static final Block END_STONE = Blocks.register("end_stone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 9.0f)));
    public static final Block DRAGON_EGG = Blocks.register("dragon_egg", (Block)new DragonEggBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).strength(3.0f, 9.0f).luminance(state -> 1).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block REDSTONE_LAMP = Blocks.register("redstone_lamp", (Block)new RedstoneLampBlock(AbstractBlock.Settings.create().luminance(Blocks.createLightLevelFromLitBlockState(15)).strength(0.3f).sounds(BlockSoundGroup.GLASS).allowsSpawning(Blocks::always)));
    public static final Block COCOA = Blocks.register("cocoa", (Block)new CocoaBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).ticksRandomly().strength(0.2f, 3.0f).sounds(BlockSoundGroup.WOOD).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SANDSTONE_STAIRS = Blocks.register("sandstone_stairs", Blocks.createOldStairsBlock(SANDSTONE));
    public static final Block EMERALD_ORE = Blocks.register("emerald_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(3, 7), AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 3.0f)));
    public static final Block DEEPSLATE_EMERALD_ORE = Blocks.register("deepslate_emerald_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(3, 7), AbstractBlock.Settings.copyShallow(EMERALD_ORE).mapColor(MapColor.DEEPSLATE_GRAY).strength(4.5f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block ENDER_CHEST = Blocks.register("ender_chest", (Block)new EnderChestBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(22.5f, 600.0f).luminance(state -> 7)));
    public static final Block TRIPWIRE_HOOK = Blocks.register("tripwire_hook", (Block)new TripwireHookBlock(AbstractBlock.Settings.create().noCollision().sounds(BlockSoundGroup.WOOD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block TRIPWIRE = Blocks.register("tripwire", (Block)new TripwireBlock(TRIPWIRE_HOOK, AbstractBlock.Settings.create().noCollision().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block EMERALD_BLOCK = Blocks.register("emerald_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.EMERALD_GREEN).instrument(NoteBlockInstrument.BIT).requiresTool().strength(5.0f, 6.0f).sounds(BlockSoundGroup.METAL)));
    public static final Block SPRUCE_STAIRS = Blocks.register("spruce_stairs", Blocks.createOldStairsBlock(SPRUCE_PLANKS));
    public static final Block BIRCH_STAIRS = Blocks.register("birch_stairs", Blocks.createOldStairsBlock(BIRCH_PLANKS));
    public static final Block JUNGLE_STAIRS = Blocks.register("jungle_stairs", Blocks.createOldStairsBlock(JUNGLE_PLANKS));
    public static final Block COMMAND_BLOCK = Blocks.register("command_block", (Block)new CommandBlock(false, AbstractBlock.Settings.create().mapColor(MapColor.BROWN).requiresTool().strength(-1.0f, 3600000.0f).dropsNothing()));
    public static final Block BEACON = Blocks.register("beacon", (Block)new BeaconBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIAMOND_BLUE).instrument(NoteBlockInstrument.HAT).strength(3.0f).luminance(state -> 15).nonOpaque().solidBlock(Blocks::never)));
    public static final Block COBBLESTONE_WALL = Blocks.register("cobblestone_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(COBBLESTONE).solid()));
    public static final Block MOSSY_COBBLESTONE_WALL = Blocks.register("mossy_cobblestone_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(COBBLESTONE).solid()));
    public static final Block FLOWER_POT = Blocks.register("flower_pot", Blocks.createFlowerPotBlock(AIR));
    public static final Block POTTED_TORCHFLOWER = Blocks.register("potted_torchflower", Blocks.createFlowerPotBlock(TORCHFLOWER));
    public static final Block POTTED_OAK_SAPLING = Blocks.register("potted_oak_sapling", Blocks.createFlowerPotBlock(OAK_SAPLING));
    public static final Block POTTED_SPRUCE_SAPLING = Blocks.register("potted_spruce_sapling", Blocks.createFlowerPotBlock(SPRUCE_SAPLING));
    public static final Block POTTED_BIRCH_SAPLING = Blocks.register("potted_birch_sapling", Blocks.createFlowerPotBlock(BIRCH_SAPLING));
    public static final Block POTTED_JUNGLE_SAPLING = Blocks.register("potted_jungle_sapling", Blocks.createFlowerPotBlock(JUNGLE_SAPLING));
    public static final Block POTTED_ACACIA_SAPLING = Blocks.register("potted_acacia_sapling", Blocks.createFlowerPotBlock(ACACIA_SAPLING));
    public static final Block POTTED_CHERRY_SAPLING = Blocks.register("potted_cherry_sapling", Blocks.createFlowerPotBlock(CHERRY_SAPLING));
    public static final Block POTTED_DARK_OAK_SAPLING = Blocks.register("potted_dark_oak_sapling", Blocks.createFlowerPotBlock(DARK_OAK_SAPLING));
    public static final Block POTTED_MANGROVE_PROPAGULE = Blocks.register("potted_mangrove_propagule", Blocks.createFlowerPotBlock(MANGROVE_PROPAGULE));
    public static final Block POTTED_FERN = Blocks.register("potted_fern", Blocks.createFlowerPotBlock(FERN));
    public static final Block POTTED_DANDELION = Blocks.register("potted_dandelion", Blocks.createFlowerPotBlock(DANDELION));
    public static final Block POTTED_POPPY = Blocks.register("potted_poppy", Blocks.createFlowerPotBlock(POPPY));
    public static final Block POTTED_BLUE_ORCHID = Blocks.register("potted_blue_orchid", Blocks.createFlowerPotBlock(BLUE_ORCHID));
    public static final Block POTTED_ALLIUM = Blocks.register("potted_allium", Blocks.createFlowerPotBlock(ALLIUM));
    public static final Block POTTED_AZURE_BLUET = Blocks.register("potted_azure_bluet", Blocks.createFlowerPotBlock(AZURE_BLUET));
    public static final Block POTTED_RED_TULIP = Blocks.register("potted_red_tulip", Blocks.createFlowerPotBlock(RED_TULIP));
    public static final Block POTTED_ORANGE_TULIP = Blocks.register("potted_orange_tulip", Blocks.createFlowerPotBlock(ORANGE_TULIP));
    public static final Block POTTED_WHITE_TULIP = Blocks.register("potted_white_tulip", Blocks.createFlowerPotBlock(WHITE_TULIP));
    public static final Block POTTED_PINK_TULIP = Blocks.register("potted_pink_tulip", Blocks.createFlowerPotBlock(PINK_TULIP));
    public static final Block POTTED_OXEYE_DAISY = Blocks.register("potted_oxeye_daisy", Blocks.createFlowerPotBlock(OXEYE_DAISY));
    public static final Block POTTED_CORNFLOWER = Blocks.register("potted_cornflower", Blocks.createFlowerPotBlock(CORNFLOWER));
    public static final Block POTTED_LILY_OF_THE_VALLEY = Blocks.register("potted_lily_of_the_valley", Blocks.createFlowerPotBlock(LILY_OF_THE_VALLEY));
    public static final Block POTTED_WITHER_ROSE = Blocks.register("potted_wither_rose", Blocks.createFlowerPotBlock(WITHER_ROSE));
    public static final Block POTTED_RED_MUSHROOM = Blocks.register("potted_red_mushroom", Blocks.createFlowerPotBlock(RED_MUSHROOM));
    public static final Block POTTED_BROWN_MUSHROOM = Blocks.register("potted_brown_mushroom", Blocks.createFlowerPotBlock(BROWN_MUSHROOM));
    public static final Block POTTED_DEAD_BUSH = Blocks.register("potted_dead_bush", Blocks.createFlowerPotBlock(DEAD_BUSH));
    public static final Block POTTED_CACTUS = Blocks.register("potted_cactus", Blocks.createFlowerPotBlock(CACTUS));
    public static final Block CARROTS = Blocks.register("carrots", (Block)new CarrotsBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block POTATOES = Blocks.register("potatoes", (Block)new PotatoesBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block OAK_BUTTON = Blocks.register("oak_button", Blocks.createWoodenButtonBlock(BlockSetType.OAK));
    public static final Block SPRUCE_BUTTON = Blocks.register("spruce_button", Blocks.createWoodenButtonBlock(BlockSetType.SPRUCE));
    public static final Block BIRCH_BUTTON = Blocks.register("birch_button", Blocks.createWoodenButtonBlock(BlockSetType.BIRCH));
    public static final Block JUNGLE_BUTTON = Blocks.register("jungle_button", Blocks.createWoodenButtonBlock(BlockSetType.JUNGLE));
    public static final Block ACACIA_BUTTON = Blocks.register("acacia_button", Blocks.createWoodenButtonBlock(BlockSetType.ACACIA));
    public static final Block CHERRY_BUTTON = Blocks.register("cherry_button", Blocks.createWoodenButtonBlock(BlockSetType.CHERRY));
    public static final Block DARK_OAK_BUTTON = Blocks.register("dark_oak_button", Blocks.createWoodenButtonBlock(BlockSetType.DARK_OAK));
    public static final Block MANGROVE_BUTTON = Blocks.register("mangrove_button", Blocks.createWoodenButtonBlock(BlockSetType.MANGROVE));
    public static final Block BAMBOO_BUTTON = Blocks.register("bamboo_button", Blocks.createWoodenButtonBlock(BlockSetType.BAMBOO));
    public static final Block SKELETON_SKULL = Blocks.register("skeleton_skull", (Block)new SkullBlock(SkullBlock.Type.SKELETON, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.SKELETON).strength(1.0f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SKELETON_WALL_SKULL = Blocks.register("skeleton_wall_skull", (Block)new WallSkullBlock(SkullBlock.Type.SKELETON, AbstractBlock.Settings.create().strength(1.0f).dropsLike(SKELETON_SKULL).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WITHER_SKELETON_SKULL = Blocks.register("wither_skeleton_skull", (Block)new WitherSkullBlock(AbstractBlock.Settings.create().instrument(NoteBlockInstrument.WITHER_SKELETON).strength(1.0f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WITHER_SKELETON_WALL_SKULL = Blocks.register("wither_skeleton_wall_skull", (Block)new WallWitherSkullBlock(AbstractBlock.Settings.create().strength(1.0f).dropsLike(WITHER_SKELETON_SKULL).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ZOMBIE_HEAD = Blocks.register("zombie_head", (Block)new SkullBlock(SkullBlock.Type.ZOMBIE, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.ZOMBIE).strength(1.0f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ZOMBIE_WALL_HEAD = Blocks.register("zombie_wall_head", (Block)new WallSkullBlock(SkullBlock.Type.ZOMBIE, AbstractBlock.Settings.create().strength(1.0f).dropsLike(ZOMBIE_HEAD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PLAYER_HEAD = Blocks.register("player_head", (Block)new PlayerSkullBlock(AbstractBlock.Settings.create().instrument(NoteBlockInstrument.CUSTOM_HEAD).strength(1.0f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PLAYER_WALL_HEAD = Blocks.register("player_wall_head", (Block)new WallPlayerSkullBlock(AbstractBlock.Settings.create().strength(1.0f).dropsLike(PLAYER_HEAD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CREEPER_HEAD = Blocks.register("creeper_head", (Block)new SkullBlock(SkullBlock.Type.CREEPER, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.CREEPER).strength(1.0f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CREEPER_WALL_HEAD = Blocks.register("creeper_wall_head", (Block)new WallSkullBlock(SkullBlock.Type.CREEPER, AbstractBlock.Settings.create().strength(1.0f).dropsLike(CREEPER_HEAD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DRAGON_HEAD = Blocks.register("dragon_head", (Block)new SkullBlock(SkullBlock.Type.DRAGON, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.DRAGON).strength(1.0f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DRAGON_WALL_HEAD = Blocks.register("dragon_wall_head", (Block)new WallSkullBlock(SkullBlock.Type.DRAGON, AbstractBlock.Settings.create().strength(1.0f).dropsLike(DRAGON_HEAD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PIGLIN_HEAD = Blocks.register("piglin_head", (Block)new SkullBlock(SkullBlock.Type.PIGLIN, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.PIGLIN).strength(1.0f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PIGLIN_WALL_HEAD = Blocks.register("piglin_wall_head", (Block)new WallPiglinHeadBlock(AbstractBlock.Settings.create().strength(1.0f).dropsLike(PIGLIN_HEAD).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ANVIL = Blocks.register("anvil", (Block)new AnvilBlock(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).requiresTool().strength(5.0f, 1200.0f).sounds(BlockSoundGroup.ANVIL).pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block CHIPPED_ANVIL = Blocks.register("chipped_anvil", (Block)new AnvilBlock(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).requiresTool().strength(5.0f, 1200.0f).sounds(BlockSoundGroup.ANVIL).pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block DAMAGED_ANVIL = Blocks.register("damaged_anvil", (Block)new AnvilBlock(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).requiresTool().strength(5.0f, 1200.0f).sounds(BlockSoundGroup.ANVIL).pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block TRAPPED_CHEST = Blocks.register("trapped_chest", (Block)new TrappedChestBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.5f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block LIGHT_WEIGHTED_PRESSURE_PLATE = Blocks.register("light_weighted_pressure_plate", (Block)new WeightedPressurePlateBlock(15, BlockSetType.GOLD, AbstractBlock.Settings.create().mapColor(MapColor.GOLD).solid().requiresTool().noCollision().strength(0.5f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block HEAVY_WEIGHTED_PRESSURE_PLATE = Blocks.register("heavy_weighted_pressure_plate", (Block)new WeightedPressurePlateBlock(150, BlockSetType.IRON, AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).solid().requiresTool().noCollision().strength(0.5f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block COMPARATOR = Blocks.register("comparator", (Block)new ComparatorBlock(AbstractBlock.Settings.create().breakInstantly().sounds(BlockSoundGroup.STONE).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DAYLIGHT_DETECTOR = Blocks.register("daylight_detector", (Block)new DaylightDetectorBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(0.2f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block REDSTONE_BLOCK = Blocks.register("redstone_block", (Block)new RedstoneBlock(AbstractBlock.Settings.create().mapColor(MapColor.BRIGHT_RED).requiresTool().strength(5.0f, 6.0f).sounds(BlockSoundGroup.METAL).solidBlock(Blocks::never)));
    public static final Block NETHER_QUARTZ_ORE = Blocks.register("nether_quartz_ore", (Block)new ExperienceDroppingBlock(UniformIntProvider.create(2, 5), AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 3.0f).sounds(BlockSoundGroup.NETHER_ORE)));
    public static final Block HOPPER = Blocks.register("hopper", (Block)new HopperBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).requiresTool().strength(3.0f, 4.8f).sounds(BlockSoundGroup.METAL).nonOpaque()));
    public static final Block QUARTZ_BLOCK = Blocks.register("quartz_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.OFF_WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.8f)));
    public static final Block CHISELED_QUARTZ_BLOCK = Blocks.register("chiseled_quartz_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.OFF_WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.8f)));
    public static final Block QUARTZ_PILLAR = Blocks.register("quartz_pillar", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.OFF_WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.8f)));
    public static final Block QUARTZ_STAIRS = Blocks.register("quartz_stairs", Blocks.createOldStairsBlock(QUARTZ_BLOCK));
    public static final Block ACTIVATOR_RAIL = Blocks.register("activator_rail", (Block)new PoweredRailBlock(AbstractBlock.Settings.create().noCollision().strength(0.7f).sounds(BlockSoundGroup.METAL)));
    public static final Block DROPPER = Blocks.register("dropper", (Block)new DropperBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.5f)));
    public static final Block WHITE_TERRACOTTA = Blocks.register("white_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block ORANGE_TERRACOTTA = Blocks.register("orange_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block MAGENTA_TERRACOTTA = Blocks.register("magenta_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_MAGENTA).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block LIGHT_BLUE_TERRACOTTA = Blocks.register("light_blue_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_LIGHT_BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block YELLOW_TERRACOTTA = Blocks.register("yellow_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block LIME_TERRACOTTA = Blocks.register("lime_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_LIME).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block PINK_TERRACOTTA = Blocks.register("pink_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_PINK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block GRAY_TERRACOTTA = Blocks.register("gray_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block LIGHT_GRAY_TERRACOTTA = Blocks.register("light_gray_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_LIGHT_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block CYAN_TERRACOTTA = Blocks.register("cyan_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_CYAN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block PURPLE_TERRACOTTA = Blocks.register("purple_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_PURPLE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block BLUE_TERRACOTTA = Blocks.register("blue_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block BROWN_TERRACOTTA = Blocks.register("brown_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block GREEN_TERRACOTTA = Blocks.register("green_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_GREEN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block RED_TERRACOTTA = Blocks.register("red_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block BLACK_TERRACOTTA = Blocks.register("black_terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block WHITE_STAINED_GLASS_PANE = Blocks.register("white_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.WHITE, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block ORANGE_STAINED_GLASS_PANE = Blocks.register("orange_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.ORANGE, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block MAGENTA_STAINED_GLASS_PANE = Blocks.register("magenta_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.MAGENTA, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block LIGHT_BLUE_STAINED_GLASS_PANE = Blocks.register("light_blue_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.LIGHT_BLUE, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block YELLOW_STAINED_GLASS_PANE = Blocks.register("yellow_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.YELLOW, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block LIME_STAINED_GLASS_PANE = Blocks.register("lime_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.LIME, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block PINK_STAINED_GLASS_PANE = Blocks.register("pink_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.PINK, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block GRAY_STAINED_GLASS_PANE = Blocks.register("gray_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.GRAY, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block LIGHT_GRAY_STAINED_GLASS_PANE = Blocks.register("light_gray_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.LIGHT_GRAY, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block CYAN_STAINED_GLASS_PANE = Blocks.register("cyan_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.CYAN, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block PURPLE_STAINED_GLASS_PANE = Blocks.register("purple_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.PURPLE, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block BLUE_STAINED_GLASS_PANE = Blocks.register("blue_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.BLUE, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block BROWN_STAINED_GLASS_PANE = Blocks.register("brown_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.BROWN, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block GREEN_STAINED_GLASS_PANE = Blocks.register("green_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.GREEN, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block RED_STAINED_GLASS_PANE = Blocks.register("red_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.RED, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block BLACK_STAINED_GLASS_PANE = Blocks.register("black_stained_glass_pane", (Block)new StainedGlassPaneBlock(DyeColor.BLACK, AbstractBlock.Settings.create().instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque()));
    public static final Block ACACIA_STAIRS = Blocks.register("acacia_stairs", Blocks.createOldStairsBlock(ACACIA_PLANKS));
    public static final Block CHERRY_STAIRS = Blocks.register("cherry_stairs", Blocks.createOldStairsBlock(CHERRY_PLANKS));
    public static final Block DARK_OAK_STAIRS = Blocks.register("dark_oak_stairs", Blocks.createOldStairsBlock(DARK_OAK_PLANKS));
    public static final Block MANGROVE_STAIRS = Blocks.register("mangrove_stairs", Blocks.createOldStairsBlock(MANGROVE_PLANKS));
    public static final Block BAMBOO_STAIRS = Blocks.register("bamboo_stairs", Blocks.createOldStairsBlock(BAMBOO_PLANKS));
    public static final Block BAMBOO_MOSAIC_STAIRS = Blocks.register("bamboo_mosaic_stairs", Blocks.createOldStairsBlock(BAMBOO_MOSAIC));
    public static final Block SLIME_BLOCK = Blocks.register("slime_block", (Block)new SlimeBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_GREEN).slipperiness(0.8f).sounds(BlockSoundGroup.SLIME).nonOpaque()));
    public static final Block BARRIER = Blocks.register("barrier", (Block)new BarrierBlock(AbstractBlock.Settings.create().strength(-1.0f, 3600000.8f).mapColor(Blocks.createMapColorFromWaterloggedBlockState(MapColor.CLEAR)).dropsNothing().nonOpaque().allowsSpawning(Blocks::never).noBlockBreakParticles().pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block LIGHT = Blocks.register("light", (Block)new LightBlock(AbstractBlock.Settings.create().replaceable().strength(-1.0f, 3600000.8f).mapColor(Blocks.createMapColorFromWaterloggedBlockState(MapColor.CLEAR)).dropsNothing().nonOpaque().luminance(LightBlock.STATE_TO_LUMINANCE)));
    public static final Block IRON_TRAPDOOR = Blocks.register("iron_trapdoor", (Block)new TrapdoorBlock(BlockSetType.IRON, AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).requiresTool().strength(5.0f).nonOpaque().allowsSpawning(Blocks::never)));
    public static final Block PRISMARINE = Blocks.register("prismarine", new Block(AbstractBlock.Settings.create().mapColor(MapColor.CYAN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block PRISMARINE_BRICKS = Blocks.register("prismarine_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DIAMOND_BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block DARK_PRISMARINE = Blocks.register("dark_prismarine", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DIAMOND_BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block PRISMARINE_STAIRS = Blocks.register("prismarine_stairs", Blocks.createOldStairsBlock(PRISMARINE));
    public static final Block PRISMARINE_BRICK_STAIRS = Blocks.register("prismarine_brick_stairs", Blocks.createOldStairsBlock(PRISMARINE_BRICKS));
    public static final Block DARK_PRISMARINE_STAIRS = Blocks.register("dark_prismarine_stairs", Blocks.createOldStairsBlock(DARK_PRISMARINE));
    public static final Block PRISMARINE_SLAB = Blocks.register("prismarine_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.CYAN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block PRISMARINE_BRICK_SLAB = Blocks.register("prismarine_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIAMOND_BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block DARK_PRISMARINE_SLAB = Blocks.register("dark_prismarine_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIAMOND_BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block SEA_LANTERN = Blocks.register("sea_lantern", new Block(AbstractBlock.Settings.create().mapColor(MapColor.OFF_WHITE).instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).luminance(state -> 15).solidBlock(Blocks::never)));
    public static final Block HAY_BLOCK = Blocks.register("hay_block", (Block)new HayBlock(AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).instrument(NoteBlockInstrument.BANJO).strength(0.5f).sounds(BlockSoundGroup.GRASS)));
    public static final Block WHITE_CARPET = Blocks.register("white_carpet", (Block)new DyedCarpetBlock(DyeColor.WHITE, AbstractBlock.Settings.create().mapColor(MapColor.WHITE).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block ORANGE_CARPET = Blocks.register("orange_carpet", (Block)new DyedCarpetBlock(DyeColor.ORANGE, AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block MAGENTA_CARPET = Blocks.register("magenta_carpet", (Block)new DyedCarpetBlock(DyeColor.MAGENTA, AbstractBlock.Settings.create().mapColor(MapColor.MAGENTA).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block LIGHT_BLUE_CARPET = Blocks.register("light_blue_carpet", (Block)new DyedCarpetBlock(DyeColor.LIGHT_BLUE, AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_BLUE).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block YELLOW_CARPET = Blocks.register("yellow_carpet", (Block)new DyedCarpetBlock(DyeColor.YELLOW, AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block LIME_CARPET = Blocks.register("lime_carpet", (Block)new DyedCarpetBlock(DyeColor.LIME, AbstractBlock.Settings.create().mapColor(MapColor.LIME).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block PINK_CARPET = Blocks.register("pink_carpet", (Block)new DyedCarpetBlock(DyeColor.PINK, AbstractBlock.Settings.create().mapColor(MapColor.PINK).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block GRAY_CARPET = Blocks.register("gray_carpet", (Block)new DyedCarpetBlock(DyeColor.GRAY, AbstractBlock.Settings.create().mapColor(MapColor.GRAY).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block LIGHT_GRAY_CARPET = Blocks.register("light_gray_carpet", (Block)new DyedCarpetBlock(DyeColor.LIGHT_GRAY, AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_GRAY).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block CYAN_CARPET = Blocks.register("cyan_carpet", (Block)new DyedCarpetBlock(DyeColor.CYAN, AbstractBlock.Settings.create().mapColor(MapColor.CYAN).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block PURPLE_CARPET = Blocks.register("purple_carpet", (Block)new DyedCarpetBlock(DyeColor.PURPLE, AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block BLUE_CARPET = Blocks.register("blue_carpet", (Block)new DyedCarpetBlock(DyeColor.BLUE, AbstractBlock.Settings.create().mapColor(MapColor.BLUE).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block BROWN_CARPET = Blocks.register("brown_carpet", (Block)new DyedCarpetBlock(DyeColor.BROWN, AbstractBlock.Settings.create().mapColor(MapColor.BROWN).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block GREEN_CARPET = Blocks.register("green_carpet", (Block)new DyedCarpetBlock(DyeColor.GREEN, AbstractBlock.Settings.create().mapColor(MapColor.GREEN).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block RED_CARPET = Blocks.register("red_carpet", (Block)new DyedCarpetBlock(DyeColor.RED, AbstractBlock.Settings.create().mapColor(MapColor.RED).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block BLACK_CARPET = Blocks.register("black_carpet", (Block)new DyedCarpetBlock(DyeColor.BLACK, AbstractBlock.Settings.create().mapColor(MapColor.BLACK).strength(0.1f).sounds(BlockSoundGroup.WOOL).burnable()));
    public static final Block TERRACOTTA = Blocks.register("terracotta", new Block(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.25f, 4.2f)));
    public static final Block COAL_BLOCK = Blocks.register("coal_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(5.0f, 6.0f)));
    public static final Block PACKED_ICE = Blocks.register("packed_ice", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PALE_PURPLE).instrument(NoteBlockInstrument.CHIME).slipperiness(0.98f).strength(0.5f).sounds(BlockSoundGroup.GLASS)));
    public static final Block SUNFLOWER = Blocks.register("sunflower", (Block)new TallFlowerBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block LILAC = Blocks.register("lilac", (Block)new TallFlowerBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ROSE_BUSH = Blocks.register("rose_bush", (Block)new TallFlowerBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PEONY = Blocks.register("peony", (Block)new TallFlowerBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block TALL_GRASS = Blocks.register("tall_grass", (Block)new TallPlantBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block LARGE_FERN = Blocks.register("large_fern", (Block)new TallPlantBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.GRASS).offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WHITE_BANNER = Blocks.register("white_banner", (Block)new BannerBlock(DyeColor.WHITE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block ORANGE_BANNER = Blocks.register("orange_banner", (Block)new BannerBlock(DyeColor.ORANGE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block MAGENTA_BANNER = Blocks.register("magenta_banner", (Block)new BannerBlock(DyeColor.MAGENTA, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block LIGHT_BLUE_BANNER = Blocks.register("light_blue_banner", (Block)new BannerBlock(DyeColor.LIGHT_BLUE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block YELLOW_BANNER = Blocks.register("yellow_banner", (Block)new BannerBlock(DyeColor.YELLOW, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block LIME_BANNER = Blocks.register("lime_banner", (Block)new BannerBlock(DyeColor.LIME, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block PINK_BANNER = Blocks.register("pink_banner", (Block)new BannerBlock(DyeColor.PINK, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block GRAY_BANNER = Blocks.register("gray_banner", (Block)new BannerBlock(DyeColor.GRAY, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block LIGHT_GRAY_BANNER = Blocks.register("light_gray_banner", (Block)new BannerBlock(DyeColor.LIGHT_GRAY, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block CYAN_BANNER = Blocks.register("cyan_banner", (Block)new BannerBlock(DyeColor.CYAN, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block PURPLE_BANNER = Blocks.register("purple_banner", (Block)new BannerBlock(DyeColor.PURPLE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BLUE_BANNER = Blocks.register("blue_banner", (Block)new BannerBlock(DyeColor.BLUE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BROWN_BANNER = Blocks.register("brown_banner", (Block)new BannerBlock(DyeColor.BROWN, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block GREEN_BANNER = Blocks.register("green_banner", (Block)new BannerBlock(DyeColor.GREEN, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block RED_BANNER = Blocks.register("red_banner", (Block)new BannerBlock(DyeColor.RED, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BLACK_BANNER = Blocks.register("black_banner", (Block)new BannerBlock(DyeColor.BLACK, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block WHITE_WALL_BANNER = Blocks.register("white_wall_banner", (Block)new WallBannerBlock(DyeColor.WHITE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(WHITE_BANNER).burnable()));
    public static final Block ORANGE_WALL_BANNER = Blocks.register("orange_wall_banner", (Block)new WallBannerBlock(DyeColor.ORANGE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(ORANGE_BANNER).burnable()));
    public static final Block MAGENTA_WALL_BANNER = Blocks.register("magenta_wall_banner", (Block)new WallBannerBlock(DyeColor.MAGENTA, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(MAGENTA_BANNER).burnable()));
    public static final Block LIGHT_BLUE_WALL_BANNER = Blocks.register("light_blue_wall_banner", (Block)new WallBannerBlock(DyeColor.LIGHT_BLUE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(LIGHT_BLUE_BANNER).burnable()));
    public static final Block YELLOW_WALL_BANNER = Blocks.register("yellow_wall_banner", (Block)new WallBannerBlock(DyeColor.YELLOW, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(YELLOW_BANNER).burnable()));
    public static final Block LIME_WALL_BANNER = Blocks.register("lime_wall_banner", (Block)new WallBannerBlock(DyeColor.LIME, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(LIME_BANNER).burnable()));
    public static final Block PINK_WALL_BANNER = Blocks.register("pink_wall_banner", (Block)new WallBannerBlock(DyeColor.PINK, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(PINK_BANNER).burnable()));
    public static final Block GRAY_WALL_BANNER = Blocks.register("gray_wall_banner", (Block)new WallBannerBlock(DyeColor.GRAY, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(GRAY_BANNER).burnable()));
    public static final Block LIGHT_GRAY_WALL_BANNER = Blocks.register("light_gray_wall_banner", (Block)new WallBannerBlock(DyeColor.LIGHT_GRAY, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(LIGHT_GRAY_BANNER).burnable()));
    public static final Block CYAN_WALL_BANNER = Blocks.register("cyan_wall_banner", (Block)new WallBannerBlock(DyeColor.CYAN, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(CYAN_BANNER).burnable()));
    public static final Block PURPLE_WALL_BANNER = Blocks.register("purple_wall_banner", (Block)new WallBannerBlock(DyeColor.PURPLE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(PURPLE_BANNER).burnable()));
    public static final Block BLUE_WALL_BANNER = Blocks.register("blue_wall_banner", (Block)new WallBannerBlock(DyeColor.BLUE, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(BLUE_BANNER).burnable()));
    public static final Block BROWN_WALL_BANNER = Blocks.register("brown_wall_banner", (Block)new WallBannerBlock(DyeColor.BROWN, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(BROWN_BANNER).burnable()));
    public static final Block GREEN_WALL_BANNER = Blocks.register("green_wall_banner", (Block)new WallBannerBlock(DyeColor.GREEN, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(GREEN_BANNER).burnable()));
    public static final Block RED_WALL_BANNER = Blocks.register("red_wall_banner", (Block)new WallBannerBlock(DyeColor.RED, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(RED_BANNER).burnable()));
    public static final Block BLACK_WALL_BANNER = Blocks.register("black_wall_banner", (Block)new WallBannerBlock(DyeColor.BLACK, AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(1.0f).sounds(BlockSoundGroup.WOOD).dropsLike(BLACK_BANNER).burnable()));
    public static final Block RED_SANDSTONE = Blocks.register("red_sandstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.8f)));
    public static final Block CHISELED_RED_SANDSTONE = Blocks.register("chiseled_red_sandstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.8f)));
    public static final Block CUT_RED_SANDSTONE = Blocks.register("cut_red_sandstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.8f)));
    public static final Block RED_SANDSTONE_STAIRS = Blocks.register("red_sandstone_stairs", Blocks.createOldStairsBlock(RED_SANDSTONE));
    public static final Block OAK_SLAB = Blocks.register("oak_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block SPRUCE_SLAB = Blocks.register("spruce_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BIRCH_SLAB = Blocks.register("birch_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block JUNGLE_SLAB = Blocks.register("jungle_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block ACACIA_SLAB = Blocks.register("acacia_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block CHERRY_SLAB = Blocks.register("cherry_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.CHERRY_WOOD).burnable()));
    public static final Block DARK_OAK_SLAB = Blocks.register("dark_oak_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block MANGROVE_SLAB = Blocks.register("mangrove_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BAMBOO_SLAB = Blocks.register("bamboo_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.BAMBOO_WOOD).burnable()));
    public static final Block BAMBOO_MOSAIC_SLAB = Blocks.register("bamboo_mosaic_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.BAMBOO_WOOD).burnable()));
    public static final Block STONE_SLAB = Blocks.register("stone_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block SMOOTH_STONE_SLAB = Blocks.register("smooth_stone_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block SANDSTONE_SLAB = Blocks.register("sandstone_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block CUT_SANDSTONE_SLAB = Blocks.register("cut_sandstone_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block PETRIFIED_OAK_SLAB = Blocks.register("petrified_oak_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block COBBLESTONE_SLAB = Blocks.register("cobblestone_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block BRICK_SLAB = Blocks.register("brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block STONE_BRICK_SLAB = Blocks.register("stone_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block MUD_BRICK_SLAB = Blocks.register("mud_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_LIGHT_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 3.0f).sounds(BlockSoundGroup.MUD_BRICKS)));
    public static final Block NETHER_BRICK_SLAB = Blocks.register("nether_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f).sounds(BlockSoundGroup.NETHER_BRICKS)));
    public static final Block QUARTZ_SLAB = Blocks.register("quartz_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.OFF_WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block RED_SANDSTONE_SLAB = Blocks.register("red_sandstone_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block CUT_RED_SANDSTONE_SLAB = Blocks.register("cut_red_sandstone_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block PURPUR_SLAB = Blocks.register("purpur_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(MapColor.MAGENTA).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block SMOOTH_STONE = Blocks.register("smooth_stone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block SMOOTH_SANDSTONE = Blocks.register("smooth_sandstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block SMOOTH_QUARTZ = Blocks.register("smooth_quartz", new Block(AbstractBlock.Settings.create().mapColor(MapColor.OFF_WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block SMOOTH_RED_SANDSTONE = Blocks.register("smooth_red_sandstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f)));
    public static final Block SPRUCE_FENCE_GATE = Blocks.register("spruce_fence_gate", (Block)new FenceGateBlock(WoodType.SPRUCE, AbstractBlock.Settings.create().mapColor(SPRUCE_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable()));
    public static final Block BIRCH_FENCE_GATE = Blocks.register("birch_fence_gate", (Block)new FenceGateBlock(WoodType.BIRCH, AbstractBlock.Settings.create().mapColor(BIRCH_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable()));
    public static final Block JUNGLE_FENCE_GATE = Blocks.register("jungle_fence_gate", (Block)new FenceGateBlock(WoodType.JUNGLE, AbstractBlock.Settings.create().mapColor(JUNGLE_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable()));
    public static final Block ACACIA_FENCE_GATE = Blocks.register("acacia_fence_gate", (Block)new FenceGateBlock(WoodType.ACACIA, AbstractBlock.Settings.create().mapColor(ACACIA_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable()));
    public static final Block CHERRY_FENCE_GATE = Blocks.register("cherry_fence_gate", (Block)new FenceGateBlock(WoodType.CHERRY, AbstractBlock.Settings.create().mapColor(CHERRY_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable()));
    public static final Block DARK_OAK_FENCE_GATE = Blocks.register("dark_oak_fence_gate", (Block)new FenceGateBlock(WoodType.DARK_OAK, AbstractBlock.Settings.create().mapColor(DARK_OAK_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable()));
    public static final Block MANGROVE_FENCE_GATE = Blocks.register("mangrove_fence_gate", (Block)new FenceGateBlock(WoodType.MANGROVE, AbstractBlock.Settings.create().mapColor(MANGROVE_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable()));
    public static final Block BAMBOO_FENCE_GATE = Blocks.register("bamboo_fence_gate", (Block)new FenceGateBlock(WoodType.BAMBOO, AbstractBlock.Settings.create().mapColor(BAMBOO_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable()));
    public static final Block SPRUCE_FENCE = Blocks.register("spruce_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(SPRUCE_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable().sounds(BlockSoundGroup.WOOD)));
    public static final Block BIRCH_FENCE = Blocks.register("birch_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(BIRCH_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable().sounds(BlockSoundGroup.WOOD)));
    public static final Block JUNGLE_FENCE = Blocks.register("jungle_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(JUNGLE_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable().sounds(BlockSoundGroup.WOOD)));
    public static final Block ACACIA_FENCE = Blocks.register("acacia_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(ACACIA_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable().sounds(BlockSoundGroup.WOOD)));
    public static final Block CHERRY_FENCE = Blocks.register("cherry_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(CHERRY_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable().sounds(BlockSoundGroup.CHERRY_WOOD)));
    public static final Block DARK_OAK_FENCE = Blocks.register("dark_oak_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(DARK_OAK_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable().sounds(BlockSoundGroup.WOOD)));
    public static final Block MANGROVE_FENCE = Blocks.register("mangrove_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(MANGROVE_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).burnable().sounds(BlockSoundGroup.WOOD)));
    public static final Block BAMBOO_FENCE = Blocks.register("bamboo_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(BAMBOO_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.BAMBOO_WOOD).burnable()));
    public static final Block SPRUCE_DOOR = Blocks.register("spruce_door", (Block)new DoorBlock(BlockSetType.SPRUCE, AbstractBlock.Settings.create().mapColor(SPRUCE_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BIRCH_DOOR = Blocks.register("birch_door", (Block)new DoorBlock(BlockSetType.BIRCH, AbstractBlock.Settings.create().mapColor(BIRCH_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block JUNGLE_DOOR = Blocks.register("jungle_door", (Block)new DoorBlock(BlockSetType.JUNGLE, AbstractBlock.Settings.create().mapColor(JUNGLE_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ACACIA_DOOR = Blocks.register("acacia_door", (Block)new DoorBlock(BlockSetType.ACACIA, AbstractBlock.Settings.create().mapColor(ACACIA_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CHERRY_DOOR = Blocks.register("cherry_door", (Block)new DoorBlock(BlockSetType.CHERRY, AbstractBlock.Settings.create().mapColor(CHERRY_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DARK_OAK_DOOR = Blocks.register("dark_oak_door", (Block)new DoorBlock(BlockSetType.DARK_OAK, AbstractBlock.Settings.create().mapColor(DARK_OAK_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block MANGROVE_DOOR = Blocks.register("mangrove_door", (Block)new DoorBlock(BlockSetType.MANGROVE, AbstractBlock.Settings.create().mapColor(MANGROVE_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BAMBOO_DOOR = Blocks.register("bamboo_door", (Block)new DoorBlock(BlockSetType.BAMBOO, AbstractBlock.Settings.create().mapColor(BAMBOO_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block END_ROD = Blocks.register("end_rod", (Block)new EndRodBlock(AbstractBlock.Settings.create().notSolid().breakInstantly().luminance(state -> 14).sounds(BlockSoundGroup.WOOD).nonOpaque()));
    public static final Block CHORUS_PLANT = Blocks.register("chorus_plant", (Block)new ChorusPlantBlock(AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).notSolid().strength(0.4f).sounds(BlockSoundGroup.WOOD).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CHORUS_FLOWER = Blocks.register("chorus_flower", (Block)new ChorusFlowerBlock(CHORUS_PLANT, AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).notSolid().ticksRandomly().strength(0.4f).sounds(BlockSoundGroup.WOOD).nonOpaque().allowsSpawning(Blocks::never).pistonBehavior(PistonBehavior.DESTROY).solidBlock(Blocks::never)));
    public static final Block PURPUR_BLOCK = Blocks.register("purpur_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.MAGENTA).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block PURPUR_PILLAR = Blocks.register("purpur_pillar", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.MAGENTA).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block PURPUR_STAIRS = Blocks.register("purpur_stairs", Blocks.createOldStairsBlock(PURPUR_BLOCK));
    public static final Block END_STONE_BRICKS = Blocks.register("end_stone_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 9.0f)));
    public static final Block TORCHFLOWER_CROP = Blocks.register("torchflower_crop", (Block)new TorchflowerBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PITCHER_CROP = Blocks.register("pitcher_crop", (Block)new PitcherCropBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PITCHER_PLANT = Blocks.register("pitcher_plant", (Block)new TallPlantBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.CROP).offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BEETROOTS = Blocks.register("beetroots", (Block)new BeetrootsBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DIRT_PATH = Blocks.register("dirt_path", (Block)new DirtPathBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).strength(0.65f).sounds(BlockSoundGroup.GRASS).blockVision(Blocks::always).suffocates(Blocks::always)));
    public static final Block END_GATEWAY = Blocks.register("end_gateway", (Block)new EndGatewayBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).noCollision().luminance(state -> 15).strength(-1.0f, 3600000.0f).dropsNothing().pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block REPEATING_COMMAND_BLOCK = Blocks.register("repeating_command_block", (Block)new CommandBlock(false, AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).requiresTool().strength(-1.0f, 3600000.0f).dropsNothing()));
    public static final Block CHAIN_COMMAND_BLOCK = Blocks.register("chain_command_block", (Block)new CommandBlock(true, AbstractBlock.Settings.create().mapColor(MapColor.GREEN).requiresTool().strength(-1.0f, 3600000.0f).dropsNothing()));
    public static final Block FROSTED_ICE = Blocks.register("frosted_ice", (Block)new FrostedIceBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_PURPLE).slipperiness(0.98f).strength(0.5f).sounds(BlockSoundGroup.GLASS).nonOpaque().allowsSpawning((state, world, pos, entityType) -> entityType == EntityType.POLAR_BEAR).solidBlock(Blocks::never)));
    public static final Block MAGMA_BLOCK = Blocks.register("magma_block", (Block)new MagmaBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().luminance(state -> 3).strength(0.5f).allowsSpawning((state, world, pos, entityType) -> entityType.isFireImmune()).postProcess(Blocks::always).emissiveLighting(Blocks::always)));
    public static final Block NETHER_WART_BLOCK = Blocks.register("nether_wart_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.RED).strength(1.0f).sounds(BlockSoundGroup.WART_BLOCK)));
    public static final Block RED_NETHER_BRICKS = Blocks.register("red_nether_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f).sounds(BlockSoundGroup.NETHER_BRICKS)));
    public static final Block BONE_BLOCK = Blocks.register("bone_block", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).instrument(NoteBlockInstrument.XYLOPHONE).requiresTool().strength(2.0f).sounds(BlockSoundGroup.BONE)));
    public static final Block STRUCTURE_VOID = Blocks.register("structure_void", (Block)new StructureVoidBlock(AbstractBlock.Settings.create().replaceable().noCollision().dropsNothing().noBlockBreakParticles().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block OBSERVER = Blocks.register("observer", (Block)new ObserverBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).strength(3.0f).requiresTool().solidBlock(Blocks::never)));
    public static final Block SHULKER_BOX = Blocks.register("shulker_box", Blocks.createShulkerBoxBlock(null, MapColor.PURPLE));
    public static final Block WHITE_SHULKER_BOX = Blocks.register("white_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.WHITE, MapColor.WHITE));
    public static final Block ORANGE_SHULKER_BOX = Blocks.register("orange_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.ORANGE, MapColor.ORANGE));
    public static final Block MAGENTA_SHULKER_BOX = Blocks.register("magenta_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.MAGENTA, MapColor.MAGENTA));
    public static final Block LIGHT_BLUE_SHULKER_BOX = Blocks.register("light_blue_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.LIGHT_BLUE, MapColor.LIGHT_BLUE));
    public static final Block YELLOW_SHULKER_BOX = Blocks.register("yellow_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.YELLOW, MapColor.YELLOW));
    public static final Block LIME_SHULKER_BOX = Blocks.register("lime_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.LIME, MapColor.LIME));
    public static final Block PINK_SHULKER_BOX = Blocks.register("pink_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.PINK, MapColor.PINK));
    public static final Block GRAY_SHULKER_BOX = Blocks.register("gray_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.GRAY, MapColor.GRAY));
    public static final Block LIGHT_GRAY_SHULKER_BOX = Blocks.register("light_gray_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.LIGHT_GRAY, MapColor.LIGHT_GRAY));
    public static final Block CYAN_SHULKER_BOX = Blocks.register("cyan_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.CYAN, MapColor.CYAN));
    public static final Block PURPLE_SHULKER_BOX = Blocks.register("purple_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.PURPLE, MapColor.TERRACOTTA_PURPLE));
    public static final Block BLUE_SHULKER_BOX = Blocks.register("blue_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.BLUE, MapColor.BLUE));
    public static final Block BROWN_SHULKER_BOX = Blocks.register("brown_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.BROWN, MapColor.BROWN));
    public static final Block GREEN_SHULKER_BOX = Blocks.register("green_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.GREEN, MapColor.GREEN));
    public static final Block RED_SHULKER_BOX = Blocks.register("red_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.RED, MapColor.RED));
    public static final Block BLACK_SHULKER_BOX = Blocks.register("black_shulker_box", Blocks.createShulkerBoxBlock(DyeColor.BLACK, MapColor.BLACK));
    public static final Block WHITE_GLAZED_TERRACOTTA = Blocks.register("white_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block ORANGE_GLAZED_TERRACOTTA = Blocks.register("orange_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block MAGENTA_GLAZED_TERRACOTTA = Blocks.register("magenta_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.MAGENTA).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block LIGHT_BLUE_GLAZED_TERRACOTTA = Blocks.register("light_blue_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.LIGHT_BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block YELLOW_GLAZED_TERRACOTTA = Blocks.register("yellow_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block LIME_GLAZED_TERRACOTTA = Blocks.register("lime_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.LIME).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block PINK_GLAZED_TERRACOTTA = Blocks.register("pink_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.PINK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block GRAY_GLAZED_TERRACOTTA = Blocks.register("gray_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block LIGHT_GRAY_GLAZED_TERRACOTTA = Blocks.register("light_gray_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.LIGHT_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block CYAN_GLAZED_TERRACOTTA = Blocks.register("cyan_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.CYAN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block PURPLE_GLAZED_TERRACOTTA = Blocks.register("purple_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.PURPLE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block BLUE_GLAZED_TERRACOTTA = Blocks.register("blue_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block BROWN_GLAZED_TERRACOTTA = Blocks.register("brown_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.BROWN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block GREEN_GLAZED_TERRACOTTA = Blocks.register("green_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.GREEN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block RED_GLAZED_TERRACOTTA = Blocks.register("red_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block BLACK_GLAZED_TERRACOTTA = Blocks.register("black_glazed_terracotta", (Block)new GlazedTerracottaBlock(AbstractBlock.Settings.create().mapColor(DyeColor.BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.4f).pistonBehavior(PistonBehavior.PUSH_ONLY)));
    public static final Block WHITE_CONCRETE = Blocks.register("white_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.WHITE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block ORANGE_CONCRETE = Blocks.register("orange_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block MAGENTA_CONCRETE = Blocks.register("magenta_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.MAGENTA).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block LIGHT_BLUE_CONCRETE = Blocks.register("light_blue_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.LIGHT_BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block YELLOW_CONCRETE = Blocks.register("yellow_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block LIME_CONCRETE = Blocks.register("lime_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.LIME).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block PINK_CONCRETE = Blocks.register("pink_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.PINK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block GRAY_CONCRETE = Blocks.register("gray_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block LIGHT_GRAY_CONCRETE = Blocks.register("light_gray_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.LIGHT_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block CYAN_CONCRETE = Blocks.register("cyan_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.CYAN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block PURPLE_CONCRETE = Blocks.register("purple_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.PURPLE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block BLUE_CONCRETE = Blocks.register("blue_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block BROWN_CONCRETE = Blocks.register("brown_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.BROWN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block GREEN_CONCRETE = Blocks.register("green_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.GREEN).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block RED_CONCRETE = Blocks.register("red_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block BLACK_CONCRETE = Blocks.register("black_concrete", new Block(AbstractBlock.Settings.create().mapColor(DyeColor.BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.8f)));
    public static final Block WHITE_CONCRETE_POWDER = Blocks.register("white_concrete_powder", (Block)new ConcretePowderBlock(WHITE_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.WHITE).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block ORANGE_CONCRETE_POWDER = Blocks.register("orange_concrete_powder", (Block)new ConcretePowderBlock(ORANGE_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.ORANGE).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block MAGENTA_CONCRETE_POWDER = Blocks.register("magenta_concrete_powder", (Block)new ConcretePowderBlock(MAGENTA_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.MAGENTA).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block LIGHT_BLUE_CONCRETE_POWDER = Blocks.register("light_blue_concrete_powder", (Block)new ConcretePowderBlock(LIGHT_BLUE_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.LIGHT_BLUE).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block YELLOW_CONCRETE_POWDER = Blocks.register("yellow_concrete_powder", (Block)new ConcretePowderBlock(YELLOW_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.YELLOW).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block LIME_CONCRETE_POWDER = Blocks.register("lime_concrete_powder", (Block)new ConcretePowderBlock(LIME_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.LIME).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block PINK_CONCRETE_POWDER = Blocks.register("pink_concrete_powder", (Block)new ConcretePowderBlock(PINK_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.PINK).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block GRAY_CONCRETE_POWDER = Blocks.register("gray_concrete_powder", (Block)new ConcretePowderBlock(GRAY_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.GRAY).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block LIGHT_GRAY_CONCRETE_POWDER = Blocks.register("light_gray_concrete_powder", (Block)new ConcretePowderBlock(LIGHT_GRAY_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.LIGHT_GRAY).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block CYAN_CONCRETE_POWDER = Blocks.register("cyan_concrete_powder", (Block)new ConcretePowderBlock(CYAN_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.CYAN).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block PURPLE_CONCRETE_POWDER = Blocks.register("purple_concrete_powder", (Block)new ConcretePowderBlock(PURPLE_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.PURPLE).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block BLUE_CONCRETE_POWDER = Blocks.register("blue_concrete_powder", (Block)new ConcretePowderBlock(BLUE_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.BLUE).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block BROWN_CONCRETE_POWDER = Blocks.register("brown_concrete_powder", (Block)new ConcretePowderBlock(BROWN_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.BROWN).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block GREEN_CONCRETE_POWDER = Blocks.register("green_concrete_powder", (Block)new ConcretePowderBlock(GREEN_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.GREEN).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block RED_CONCRETE_POWDER = Blocks.register("red_concrete_powder", (Block)new ConcretePowderBlock(RED_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.RED).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block BLACK_CONCRETE_POWDER = Blocks.register("black_concrete_powder", (Block)new ConcretePowderBlock(BLACK_CONCRETE, AbstractBlock.Settings.create().mapColor(DyeColor.BLACK).instrument(NoteBlockInstrument.SNARE).strength(0.5f).sounds(BlockSoundGroup.SAND)));
    public static final Block KELP = Blocks.register("kelp", (Block)new KelpBlock(AbstractBlock.Settings.create().mapColor(MapColor.WATER_BLUE).noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block KELP_PLANT = Blocks.register("kelp_plant", (Block)new KelpPlantBlock(AbstractBlock.Settings.create().mapColor(MapColor.WATER_BLUE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DRIED_KELP_BLOCK = Blocks.register("dried_kelp_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GREEN).strength(0.5f, 2.5f).sounds(BlockSoundGroup.GRASS)));
    public static final Block TURTLE_EGG = Blocks.register("turtle_egg", (Block)new TurtleEggBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).solid().strength(0.5f).sounds(BlockSoundGroup.METAL).ticksRandomly().nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SNIFFER_EGG = Blocks.register("sniffer_egg", (Block)new SnifferEggBlock(AbstractBlock.Settings.create().mapColor(MapColor.RED).strength(0.5f).sounds(BlockSoundGroup.METAL).nonOpaque()));
    public static final Block DEAD_TUBE_CORAL_BLOCK = Blocks.register("dead_tube_coral_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block DEAD_BRAIN_CORAL_BLOCK = Blocks.register("dead_brain_coral_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block DEAD_BUBBLE_CORAL_BLOCK = Blocks.register("dead_bubble_coral_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block DEAD_FIRE_CORAL_BLOCK = Blocks.register("dead_fire_coral_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block DEAD_HORN_CORAL_BLOCK = Blocks.register("dead_horn_coral_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block TUBE_CORAL_BLOCK = Blocks.register("tube_coral_block", (Block)new CoralBlockBlock(DEAD_TUBE_CORAL_BLOCK, AbstractBlock.Settings.create().mapColor(MapColor.BLUE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f).sounds(BlockSoundGroup.CORAL)));
    public static final Block BRAIN_CORAL_BLOCK = Blocks.register("brain_coral_block", (Block)new CoralBlockBlock(DEAD_BRAIN_CORAL_BLOCK, AbstractBlock.Settings.create().mapColor(MapColor.PINK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f).sounds(BlockSoundGroup.CORAL)));
    public static final Block BUBBLE_CORAL_BLOCK = Blocks.register("bubble_coral_block", (Block)new CoralBlockBlock(DEAD_BUBBLE_CORAL_BLOCK, AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f).sounds(BlockSoundGroup.CORAL)));
    public static final Block FIRE_CORAL_BLOCK = Blocks.register("fire_coral_block", (Block)new CoralBlockBlock(DEAD_FIRE_CORAL_BLOCK, AbstractBlock.Settings.create().mapColor(MapColor.RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f).sounds(BlockSoundGroup.CORAL)));
    public static final Block HORN_CORAL_BLOCK = Blocks.register("horn_coral_block", (Block)new CoralBlockBlock(DEAD_HORN_CORAL_BLOCK, AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f).sounds(BlockSoundGroup.CORAL)));
    public static final Block DEAD_TUBE_CORAL = Blocks.register("dead_tube_coral", (Block)new DeadCoralBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block DEAD_BRAIN_CORAL = Blocks.register("dead_brain_coral", (Block)new DeadCoralBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block DEAD_BUBBLE_CORAL = Blocks.register("dead_bubble_coral", (Block)new DeadCoralBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block DEAD_FIRE_CORAL = Blocks.register("dead_fire_coral", (Block)new DeadCoralBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block DEAD_HORN_CORAL = Blocks.register("dead_horn_coral", (Block)new DeadCoralBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block TUBE_CORAL = Blocks.register("tube_coral", (Block)new CoralBlock(DEAD_TUBE_CORAL, AbstractBlock.Settings.create().mapColor(MapColor.BLUE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BRAIN_CORAL = Blocks.register("brain_coral", (Block)new CoralBlock(DEAD_BRAIN_CORAL, AbstractBlock.Settings.create().mapColor(MapColor.PINK).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BUBBLE_CORAL = Blocks.register("bubble_coral", (Block)new CoralBlock(DEAD_BUBBLE_CORAL, AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block FIRE_CORAL = Blocks.register("fire_coral", (Block)new CoralBlock(DEAD_FIRE_CORAL, AbstractBlock.Settings.create().mapColor(MapColor.RED).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block HORN_CORAL = Blocks.register("horn_coral", (Block)new CoralBlock(DEAD_HORN_CORAL, AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DEAD_TUBE_CORAL_FAN = Blocks.register("dead_tube_coral_fan", (Block)new DeadCoralFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block DEAD_BRAIN_CORAL_FAN = Blocks.register("dead_brain_coral_fan", (Block)new DeadCoralFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block DEAD_BUBBLE_CORAL_FAN = Blocks.register("dead_bubble_coral_fan", (Block)new DeadCoralFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block DEAD_FIRE_CORAL_FAN = Blocks.register("dead_fire_coral_fan", (Block)new DeadCoralFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block DEAD_HORN_CORAL_FAN = Blocks.register("dead_horn_coral_fan", (Block)new DeadCoralFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly()));
    public static final Block TUBE_CORAL_FAN = Blocks.register("tube_coral_fan", (Block)new CoralFanBlock(DEAD_TUBE_CORAL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.BLUE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BRAIN_CORAL_FAN = Blocks.register("brain_coral_fan", (Block)new CoralFanBlock(DEAD_BRAIN_CORAL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.PINK).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BUBBLE_CORAL_FAN = Blocks.register("bubble_coral_fan", (Block)new CoralFanBlock(DEAD_BUBBLE_CORAL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block FIRE_CORAL_FAN = Blocks.register("fire_coral_fan", (Block)new CoralFanBlock(DEAD_FIRE_CORAL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.RED).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block HORN_CORAL_FAN = Blocks.register("horn_coral_fan", (Block)new CoralFanBlock(DEAD_HORN_CORAL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block DEAD_TUBE_CORAL_WALL_FAN = Blocks.register("dead_tube_coral_wall_fan", (Block)new DeadCoralWallFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly().dropsLike(DEAD_TUBE_CORAL_FAN)));
    public static final Block DEAD_BRAIN_CORAL_WALL_FAN = Blocks.register("dead_brain_coral_wall_fan", (Block)new DeadCoralWallFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly().dropsLike(DEAD_BRAIN_CORAL_FAN)));
    public static final Block DEAD_BUBBLE_CORAL_WALL_FAN = Blocks.register("dead_bubble_coral_wall_fan", (Block)new DeadCoralWallFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly().dropsLike(DEAD_BUBBLE_CORAL_FAN)));
    public static final Block DEAD_FIRE_CORAL_WALL_FAN = Blocks.register("dead_fire_coral_wall_fan", (Block)new DeadCoralWallFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly().dropsLike(DEAD_FIRE_CORAL_FAN)));
    public static final Block DEAD_HORN_CORAL_WALL_FAN = Blocks.register("dead_horn_coral_wall_fan", (Block)new DeadCoralWallFanBlock(AbstractBlock.Settings.create().mapColor(MapColor.GRAY).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().breakInstantly().dropsLike(DEAD_HORN_CORAL_FAN)));
    public static final Block TUBE_CORAL_WALL_FAN = Blocks.register("tube_coral_wall_fan", (Block)new CoralWallFanBlock(DEAD_TUBE_CORAL_WALL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.BLUE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).dropsLike(TUBE_CORAL_FAN).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BRAIN_CORAL_WALL_FAN = Blocks.register("brain_coral_wall_fan", (Block)new CoralWallFanBlock(DEAD_BRAIN_CORAL_WALL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.PINK).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).dropsLike(BRAIN_CORAL_FAN).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BUBBLE_CORAL_WALL_FAN = Blocks.register("bubble_coral_wall_fan", (Block)new CoralWallFanBlock(DEAD_BUBBLE_CORAL_WALL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).dropsLike(BUBBLE_CORAL_FAN).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block FIRE_CORAL_WALL_FAN = Blocks.register("fire_coral_wall_fan", (Block)new CoralWallFanBlock(DEAD_FIRE_CORAL_WALL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.RED).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).dropsLike(FIRE_CORAL_FAN).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block HORN_CORAL_WALL_FAN = Blocks.register("horn_coral_wall_fan", (Block)new CoralWallFanBlock(DEAD_HORN_CORAL_WALL_FAN, AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).noCollision().breakInstantly().sounds(BlockSoundGroup.WET_GRASS).dropsLike(HORN_CORAL_FAN).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SEA_PICKLE = Blocks.register("sea_pickle", (Block)new SeaPickleBlock(AbstractBlock.Settings.create().mapColor(MapColor.GREEN).luminance(state -> SeaPickleBlock.isDry(state) ? 0 : 3 + 3 * state.get(SeaPickleBlock.PICKLES)).sounds(BlockSoundGroup.SLIME).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BLUE_ICE = Blocks.register("blue_ice", (Block)new TranslucentBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_PURPLE).strength(2.8f).slipperiness(0.989f).sounds(BlockSoundGroup.GLASS)));
    public static final Block CONDUIT = Blocks.register("conduit", (Block)new ConduitBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIAMOND_BLUE).solid().instrument(NoteBlockInstrument.HAT).strength(3.0f).luminance(state -> 15).nonOpaque()));
    public static final Block BAMBOO_SAPLING = Blocks.register("bamboo_sapling", (Block)new BambooShootBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).solid().ticksRandomly().breakInstantly().noCollision().strength(1.0f).sounds(BlockSoundGroup.BAMBOO_SAPLING).offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BAMBOO = Blocks.register("bamboo", (Block)new BambooBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).solid().ticksRandomly().breakInstantly().strength(1.0f).sounds(BlockSoundGroup.BAMBOO).nonOpaque().dynamicBounds().offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY).solidBlock(Blocks::never)));
    public static final Block POTTED_BAMBOO = Blocks.register("potted_bamboo", Blocks.createFlowerPotBlock(BAMBOO));
    public static final Block VOID_AIR = Blocks.register("void_air", (Block)new AirBlock(AbstractBlock.Settings.create().replaceable().noCollision().dropsNothing().air()));
    public static final Block CAVE_AIR = Blocks.register("cave_air", (Block)new AirBlock(AbstractBlock.Settings.create().replaceable().noCollision().dropsNothing().air()));
    public static final Block BUBBLE_COLUMN = Blocks.register("bubble_column", (Block)new BubbleColumnBlock(AbstractBlock.Settings.create().mapColor(MapColor.WATER_BLUE).replaceable().noCollision().dropsNothing().pistonBehavior(PistonBehavior.DESTROY).liquid().sounds(BlockSoundGroup.INTENTIONALLY_EMPTY)));
    public static final Block POLISHED_GRANITE_STAIRS = Blocks.register("polished_granite_stairs", Blocks.createOldStairsBlock(POLISHED_GRANITE));
    public static final Block SMOOTH_RED_SANDSTONE_STAIRS = Blocks.register("smooth_red_sandstone_stairs", Blocks.createOldStairsBlock(SMOOTH_RED_SANDSTONE));
    public static final Block MOSSY_STONE_BRICK_STAIRS = Blocks.register("mossy_stone_brick_stairs", Blocks.createOldStairsBlock(MOSSY_STONE_BRICKS));
    public static final Block POLISHED_DIORITE_STAIRS = Blocks.register("polished_diorite_stairs", Blocks.createOldStairsBlock(POLISHED_DIORITE));
    public static final Block MOSSY_COBBLESTONE_STAIRS = Blocks.register("mossy_cobblestone_stairs", Blocks.createOldStairsBlock(MOSSY_COBBLESTONE));
    public static final Block END_STONE_BRICK_STAIRS = Blocks.register("end_stone_brick_stairs", Blocks.createOldStairsBlock(END_STONE_BRICKS));
    public static final Block STONE_STAIRS = Blocks.register("stone_stairs", Blocks.createOldStairsBlock(STONE));
    public static final Block SMOOTH_SANDSTONE_STAIRS = Blocks.register("smooth_sandstone_stairs", Blocks.createOldStairsBlock(SMOOTH_SANDSTONE));
    public static final Block SMOOTH_QUARTZ_STAIRS = Blocks.register("smooth_quartz_stairs", Blocks.createOldStairsBlock(SMOOTH_QUARTZ));
    public static final Block GRANITE_STAIRS = Blocks.register("granite_stairs", Blocks.createOldStairsBlock(GRANITE));
    public static final Block ANDESITE_STAIRS = Blocks.register("andesite_stairs", Blocks.createOldStairsBlock(ANDESITE));
    public static final Block RED_NETHER_BRICK_STAIRS = Blocks.register("red_nether_brick_stairs", Blocks.createOldStairsBlock(RED_NETHER_BRICKS));
    public static final Block POLISHED_ANDESITE_STAIRS = Blocks.register("polished_andesite_stairs", Blocks.createOldStairsBlock(POLISHED_ANDESITE));
    public static final Block DIORITE_STAIRS = Blocks.register("diorite_stairs", Blocks.createOldStairsBlock(DIORITE));
    public static final Block POLISHED_GRANITE_SLAB = Blocks.register("polished_granite_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(POLISHED_GRANITE)));
    public static final Block SMOOTH_RED_SANDSTONE_SLAB = Blocks.register("smooth_red_sandstone_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(SMOOTH_RED_SANDSTONE)));
    public static final Block MOSSY_STONE_BRICK_SLAB = Blocks.register("mossy_stone_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(MOSSY_STONE_BRICKS)));
    public static final Block POLISHED_DIORITE_SLAB = Blocks.register("polished_diorite_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(POLISHED_DIORITE)));
    public static final Block MOSSY_COBBLESTONE_SLAB = Blocks.register("mossy_cobblestone_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(MOSSY_COBBLESTONE)));
    public static final Block END_STONE_BRICK_SLAB = Blocks.register("end_stone_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(END_STONE_BRICKS)));
    public static final Block SMOOTH_SANDSTONE_SLAB = Blocks.register("smooth_sandstone_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(SMOOTH_SANDSTONE)));
    public static final Block SMOOTH_QUARTZ_SLAB = Blocks.register("smooth_quartz_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(SMOOTH_QUARTZ)));
    public static final Block GRANITE_SLAB = Blocks.register("granite_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(GRANITE)));
    public static final Block ANDESITE_SLAB = Blocks.register("andesite_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(ANDESITE)));
    public static final Block RED_NETHER_BRICK_SLAB = Blocks.register("red_nether_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(RED_NETHER_BRICKS)));
    public static final Block POLISHED_ANDESITE_SLAB = Blocks.register("polished_andesite_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(POLISHED_ANDESITE)));
    public static final Block DIORITE_SLAB = Blocks.register("diorite_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(DIORITE)));
    public static final Block BRICK_WALL = Blocks.register("brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(BRICKS).solid()));
    public static final Block PRISMARINE_WALL = Blocks.register("prismarine_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(PRISMARINE).solid()));
    public static final Block RED_SANDSTONE_WALL = Blocks.register("red_sandstone_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(RED_SANDSTONE).solid()));
    public static final Block MOSSY_STONE_BRICK_WALL = Blocks.register("mossy_stone_brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(MOSSY_STONE_BRICKS).solid()));
    public static final Block GRANITE_WALL = Blocks.register("granite_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(GRANITE).solid()));
    public static final Block STONE_BRICK_WALL = Blocks.register("stone_brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(STONE_BRICKS).solid()));
    public static final Block MUD_BRICK_WALL = Blocks.register("mud_brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(MUD_BRICKS).solid()));
    public static final Block NETHER_BRICK_WALL = Blocks.register("nether_brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(NETHER_BRICKS).solid()));
    public static final Block ANDESITE_WALL = Blocks.register("andesite_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(ANDESITE).solid()));
    public static final Block RED_NETHER_BRICK_WALL = Blocks.register("red_nether_brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(RED_NETHER_BRICKS).solid()));
    public static final Block SANDSTONE_WALL = Blocks.register("sandstone_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(SANDSTONE).solid()));
    public static final Block END_STONE_BRICK_WALL = Blocks.register("end_stone_brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(END_STONE_BRICKS).solid()));
    public static final Block DIORITE_WALL = Blocks.register("diorite_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(DIORITE).solid()));
    public static final Block SCAFFOLDING = Blocks.register("scaffolding", (Block)new ScaffoldingBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).noCollision().sounds(BlockSoundGroup.SCAFFOLDING).dynamicBounds().allowsSpawning(Blocks::never).pistonBehavior(PistonBehavior.DESTROY).solidBlock(Blocks::never)));
    public static final Block LOOM = Blocks.register("loom", (Block)new LoomBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.5f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BARREL = Blocks.register("barrel", (Block)new BarrelBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.5f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block SMOKER = Blocks.register("smoker", (Block)new SmokerBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.5f).luminance(Blocks.createLightLevelFromLitBlockState(13))));
    public static final Block BLAST_FURNACE = Blocks.register("blast_furnace", (Block)new BlastFurnaceBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.5f).luminance(Blocks.createLightLevelFromLitBlockState(13))));
    public static final Block CARTOGRAPHY_TABLE = Blocks.register("cartography_table", (Block)new CartographyTableBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.5f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block FLETCHING_TABLE = Blocks.register("fletching_table", (Block)new FletchingTableBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.5f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block GRINDSTONE = Blocks.register("grindstone", (Block)new GrindstoneBlock(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).requiresTool().strength(2.0f, 6.0f).sounds(BlockSoundGroup.STONE).pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block LECTERN = Blocks.register("lectern", (Block)new LecternBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.5f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block SMITHING_TABLE = Blocks.register("smithing_table", (Block)new SmithingTableBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(2.5f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block STONECUTTER = Blocks.register("stonecutter", (Block)new StonecutterBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.5f)));
    public static final Block BELL = Blocks.register("bell", (Block)new BellBlock(AbstractBlock.Settings.create().mapColor(MapColor.GOLD).solid().requiresTool().strength(5.0f).sounds(BlockSoundGroup.ANVIL).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block LANTERN = Blocks.register("lantern", (Block)new LanternBlock(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).solid().requiresTool().strength(3.5f).sounds(BlockSoundGroup.LANTERN).luminance(state -> 15).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SOUL_LANTERN = Blocks.register("soul_lantern", (Block)new LanternBlock(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).solid().requiresTool().strength(3.5f).sounds(BlockSoundGroup.LANTERN).luminance(state -> 10).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CAMPFIRE = Blocks.register("campfire", (Block)new CampfireBlock(true, 1, AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).luminance(Blocks.createLightLevelFromLitBlockState(15)).nonOpaque().burnable()));
    public static final Block SOUL_CAMPFIRE = Blocks.register("soul_campfire", (Block)new CampfireBlock(false, 2, AbstractBlock.Settings.create().mapColor(MapColor.SPRUCE_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).luminance(Blocks.createLightLevelFromLitBlockState(10)).nonOpaque().burnable()));
    public static final Block SWEET_BERRY_BUSH = Blocks.register("sweet_berry_bush", (Block)new SweetBerryBushBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).ticksRandomly().noCollision().sounds(BlockSoundGroup.SWEET_BERRY_BUSH).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WARPED_STEM = Blocks.register("warped_stem", Blocks.createNetherStemBlock(MapColor.DARK_AQUA));
    public static final Block STRIPPED_WARPED_STEM = Blocks.register("stripped_warped_stem", Blocks.createNetherStemBlock(MapColor.DARK_AQUA));
    public static final Block WARPED_HYPHAE = Blocks.register("warped_hyphae", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_DULL_PINK).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.NETHER_STEM)));
    public static final Block STRIPPED_WARPED_HYPHAE = Blocks.register("stripped_warped_hyphae", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_DULL_PINK).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.NETHER_STEM)));
    public static final Block WARPED_NYLIUM = Blocks.register("warped_nylium", (Block)new NyliumBlock(AbstractBlock.Settings.create().mapColor(MapColor.TEAL).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.4f).sounds(BlockSoundGroup.NYLIUM).ticksRandomly()));
    public static final Block WARPED_FUNGUS = Blocks.register("warped_fungus", (Block)new FungusBlock(TreeConfiguredFeatures.WARPED_FUNGUS_PLANTED, WARPED_NYLIUM, AbstractBlock.Settings.create().mapColor(MapColor.CYAN).breakInstantly().noCollision().sounds(BlockSoundGroup.FUNGUS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WARPED_WART_BLOCK = Blocks.register("warped_wart_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BRIGHT_TEAL).strength(1.0f).sounds(BlockSoundGroup.WART_BLOCK)));
    public static final Block WARPED_ROOTS = Blocks.register("warped_roots", (Block)new RootsBlock(AbstractBlock.Settings.create().mapColor(MapColor.CYAN).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.ROOTS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block NETHER_SPROUTS = Blocks.register("nether_sprouts", (Block)new SproutsBlock(AbstractBlock.Settings.create().mapColor(MapColor.CYAN).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.NETHER_SPROUTS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CRIMSON_STEM = Blocks.register("crimson_stem", Blocks.createNetherStemBlock(MapColor.DULL_PINK));
    public static final Block STRIPPED_CRIMSON_STEM = Blocks.register("stripped_crimson_stem", Blocks.createNetherStemBlock(MapColor.DULL_PINK));
    public static final Block CRIMSON_HYPHAE = Blocks.register("crimson_hyphae", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_CRIMSON).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.NETHER_STEM)));
    public static final Block STRIPPED_CRIMSON_HYPHAE = Blocks.register("stripped_crimson_hyphae", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_CRIMSON).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.NETHER_STEM)));
    public static final Block CRIMSON_NYLIUM = Blocks.register("crimson_nylium", (Block)new NyliumBlock(AbstractBlock.Settings.create().mapColor(MapColor.DULL_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(0.4f).sounds(BlockSoundGroup.NYLIUM).ticksRandomly()));
    public static final Block CRIMSON_FUNGUS = Blocks.register("crimson_fungus", (Block)new FungusBlock(TreeConfiguredFeatures.CRIMSON_FUNGUS_PLANTED, CRIMSON_NYLIUM, AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).breakInstantly().noCollision().sounds(BlockSoundGroup.FUNGUS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SHROOMLIGHT = Blocks.register("shroomlight", new Block(AbstractBlock.Settings.create().mapColor(MapColor.RED).strength(1.0f).sounds(BlockSoundGroup.SHROOMLIGHT).luminance(state -> 15)));
    public static final Block WEEPING_VINES = Blocks.register("weeping_vines", (Block)new WeepingVinesBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).ticksRandomly().noCollision().breakInstantly().sounds(BlockSoundGroup.WEEPING_VINES).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WEEPING_VINES_PLANT = Blocks.register("weeping_vines_plant", (Block)new WeepingVinesPlantBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).noCollision().breakInstantly().sounds(BlockSoundGroup.WEEPING_VINES).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block TWISTING_VINES = Blocks.register("twisting_vines", (Block)new TwistingVinesBlock(AbstractBlock.Settings.create().mapColor(MapColor.CYAN).ticksRandomly().noCollision().breakInstantly().sounds(BlockSoundGroup.WEEPING_VINES).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block TWISTING_VINES_PLANT = Blocks.register("twisting_vines_plant", (Block)new TwistingVinesPlantBlock(AbstractBlock.Settings.create().mapColor(MapColor.CYAN).noCollision().breakInstantly().sounds(BlockSoundGroup.WEEPING_VINES).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CRIMSON_ROOTS = Blocks.register("crimson_roots", (Block)new RootsBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.ROOTS).offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CRIMSON_PLANKS = Blocks.register("crimson_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DULL_PINK).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.NETHER_WOOD)));
    public static final Block WARPED_PLANKS = Blocks.register("warped_planks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DARK_AQUA).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.NETHER_WOOD)));
    public static final Block CRIMSON_SLAB = Blocks.register("crimson_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(CRIMSON_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.NETHER_WOOD)));
    public static final Block WARPED_SLAB = Blocks.register("warped_slab", (Block)new SlabBlock(AbstractBlock.Settings.create().mapColor(WARPED_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.NETHER_WOOD)));
    public static final Block CRIMSON_PRESSURE_PLATE = Blocks.register("crimson_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.CRIMSON, AbstractBlock.Settings.create().mapColor(CRIMSON_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WARPED_PRESSURE_PLATE = Blocks.register("warped_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.WARPED, AbstractBlock.Settings.create().mapColor(WARPED_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).noCollision().strength(0.5f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CRIMSON_FENCE = Blocks.register("crimson_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(CRIMSON_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.NETHER_WOOD)));
    public static final Block WARPED_FENCE = Blocks.register("warped_fence", (Block)new FenceBlock(AbstractBlock.Settings.create().mapColor(WARPED_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f).sounds(BlockSoundGroup.NETHER_WOOD)));
    public static final Block CRIMSON_TRAPDOOR = Blocks.register("crimson_trapdoor", (Block)new TrapdoorBlock(BlockSetType.CRIMSON, AbstractBlock.Settings.create().mapColor(CRIMSON_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never)));
    public static final Block WARPED_TRAPDOOR = Blocks.register("warped_trapdoor", (Block)new TrapdoorBlock(BlockSetType.WARPED, AbstractBlock.Settings.create().mapColor(WARPED_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().allowsSpawning(Blocks::never)));
    public static final Block CRIMSON_FENCE_GATE = Blocks.register("crimson_fence_gate", (Block)new FenceGateBlock(WoodType.CRIMSON, AbstractBlock.Settings.create().mapColor(CRIMSON_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f)));
    public static final Block WARPED_FENCE_GATE = Blocks.register("warped_fence_gate", (Block)new FenceGateBlock(WoodType.WARPED, AbstractBlock.Settings.create().mapColor(WARPED_PLANKS.getDefaultMapColor()).solid().instrument(NoteBlockInstrument.BASS).strength(2.0f, 3.0f)));
    public static final Block CRIMSON_STAIRS = Blocks.register("crimson_stairs", Blocks.createOldStairsBlock(CRIMSON_PLANKS));
    public static final Block WARPED_STAIRS = Blocks.register("warped_stairs", Blocks.createOldStairsBlock(WARPED_PLANKS));
    public static final Block CRIMSON_BUTTON = Blocks.register("crimson_button", Blocks.createWoodenButtonBlock(BlockSetType.CRIMSON));
    public static final Block WARPED_BUTTON = Blocks.register("warped_button", Blocks.createWoodenButtonBlock(BlockSetType.WARPED));
    public static final Block CRIMSON_DOOR = Blocks.register("crimson_door", (Block)new DoorBlock(BlockSetType.CRIMSON, AbstractBlock.Settings.create().mapColor(CRIMSON_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block WARPED_DOOR = Blocks.register("warped_door", (Block)new DoorBlock(BlockSetType.WARPED, AbstractBlock.Settings.create().mapColor(WARPED_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0f).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CRIMSON_SIGN = Blocks.register("crimson_sign", (Block)new SignBlock(WoodType.CRIMSON, AbstractBlock.Settings.create().mapColor(CRIMSON_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).solid().noCollision().strength(1.0f)));
    public static final Block WARPED_SIGN = Blocks.register("warped_sign", (Block)new SignBlock(WoodType.WARPED, AbstractBlock.Settings.create().mapColor(WARPED_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).solid().noCollision().strength(1.0f)));
    public static final Block CRIMSON_WALL_SIGN = Blocks.register("crimson_wall_sign", (Block)new WallSignBlock(WoodType.CRIMSON, AbstractBlock.Settings.create().mapColor(CRIMSON_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).solid().noCollision().strength(1.0f).dropsLike(CRIMSON_SIGN)));
    public static final Block WARPED_WALL_SIGN = Blocks.register("warped_wall_sign", (Block)new WallSignBlock(WoodType.WARPED, AbstractBlock.Settings.create().mapColor(WARPED_PLANKS.getDefaultMapColor()).instrument(NoteBlockInstrument.BASS).solid().noCollision().strength(1.0f).dropsLike(WARPED_SIGN)));
    public static final Block STRUCTURE_BLOCK = Blocks.register("structure_block", (Block)new StructureBlock(AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_GRAY).requiresTool().strength(-1.0f, 3600000.0f).dropsNothing()));
    public static final Block JIGSAW = Blocks.register("jigsaw", (Block)new JigsawBlock(AbstractBlock.Settings.create().mapColor(MapColor.LIGHT_GRAY).requiresTool().strength(-1.0f, 3600000.0f).dropsNothing()));
    public static final Block COMPOSTER = Blocks.register("composter", (Block)new ComposterBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(0.6f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block TARGET = Blocks.register("target", (Block)new TargetBlock(AbstractBlock.Settings.create().mapColor(MapColor.OFF_WHITE).strength(0.5f).sounds(BlockSoundGroup.GRASS)));
    public static final Block BEE_NEST = Blocks.register("bee_nest", (Block)new BeehiveBlock(AbstractBlock.Settings.create().mapColor(MapColor.YELLOW).instrument(NoteBlockInstrument.BASS).strength(0.3f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block BEEHIVE = Blocks.register("beehive", (Block)new BeehiveBlock(AbstractBlock.Settings.create().mapColor(MapColor.OAK_TAN).instrument(NoteBlockInstrument.BASS).strength(0.6f).sounds(BlockSoundGroup.WOOD).burnable()));
    public static final Block HONEY_BLOCK = Blocks.register("honey_block", (Block)new HoneyBlock(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).velocityMultiplier(0.4f).jumpVelocityMultiplier(0.5f).nonOpaque().sounds(BlockSoundGroup.HONEY)));
    public static final Block HONEYCOMB_BLOCK = Blocks.register("honeycomb_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).strength(0.6f).sounds(BlockSoundGroup.CORAL)));
    public static final Block NETHERITE_BLOCK = Blocks.register("netherite_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).requiresTool().strength(50.0f, 1200.0f).sounds(BlockSoundGroup.NETHERITE)));
    public static final Block ANCIENT_DEBRIS = Blocks.register("ancient_debris", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).requiresTool().strength(30.0f, 1200.0f).sounds(BlockSoundGroup.ANCIENT_DEBRIS)));
    public static final Block CRYING_OBSIDIAN = Blocks.register("crying_obsidian", (Block)new CryingObsidianBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(50.0f, 1200.0f).luminance(state -> 10)));
    public static final Block RESPAWN_ANCHOR = Blocks.register("respawn_anchor", (Block)new RespawnAnchorBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(50.0f, 1200.0f).luminance(state -> RespawnAnchorBlock.getLightLevel(state, 15))));
    public static final Block POTTED_CRIMSON_FUNGUS = Blocks.register("potted_crimson_fungus", Blocks.createFlowerPotBlock(CRIMSON_FUNGUS));
    public static final Block POTTED_WARPED_FUNGUS = Blocks.register("potted_warped_fungus", Blocks.createFlowerPotBlock(WARPED_FUNGUS));
    public static final Block POTTED_CRIMSON_ROOTS = Blocks.register("potted_crimson_roots", Blocks.createFlowerPotBlock(CRIMSON_ROOTS));
    public static final Block POTTED_WARPED_ROOTS = Blocks.register("potted_warped_roots", Blocks.createFlowerPotBlock(WARPED_ROOTS));
    public static final Block LODESTONE = Blocks.register("lodestone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).requiresTool().strength(3.5f).sounds(BlockSoundGroup.LODESTONE).pistonBehavior(PistonBehavior.BLOCK)));
    public static final Block BLACKSTONE = Blocks.register("blackstone", new Block(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(1.5f, 6.0f)));
    public static final Block BLACKSTONE_STAIRS = Blocks.register("blackstone_stairs", Blocks.createOldStairsBlock(BLACKSTONE));
    public static final Block BLACKSTONE_WALL = Blocks.register("blackstone_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(BLACKSTONE).solid()));
    public static final Block BLACKSTONE_SLAB = Blocks.register("blackstone_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(BLACKSTONE).strength(2.0f, 6.0f)));
    public static final Block POLISHED_BLACKSTONE = Blocks.register("polished_blackstone", new Block(AbstractBlock.Settings.copyShallow(BLACKSTONE).strength(2.0f, 6.0f)));
    public static final Block POLISHED_BLACKSTONE_BRICKS = Blocks.register("polished_blackstone_bricks", new Block(AbstractBlock.Settings.copyShallow(POLISHED_BLACKSTONE).strength(1.5f, 6.0f)));
    public static final Block CRACKED_POLISHED_BLACKSTONE_BRICKS = Blocks.register("cracked_polished_blackstone_bricks", new Block(AbstractBlock.Settings.copyShallow(POLISHED_BLACKSTONE_BRICKS)));
    public static final Block CHISELED_POLISHED_BLACKSTONE = Blocks.register("chiseled_polished_blackstone", new Block(AbstractBlock.Settings.copyShallow(POLISHED_BLACKSTONE).strength(1.5f, 6.0f)));
    public static final Block POLISHED_BLACKSTONE_BRICK_SLAB = Blocks.register("polished_blackstone_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(POLISHED_BLACKSTONE_BRICKS).strength(2.0f, 6.0f)));
    public static final Block POLISHED_BLACKSTONE_BRICK_STAIRS = Blocks.register("polished_blackstone_brick_stairs", Blocks.createOldStairsBlock(POLISHED_BLACKSTONE_BRICKS));
    public static final Block POLISHED_BLACKSTONE_BRICK_WALL = Blocks.register("polished_blackstone_brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(POLISHED_BLACKSTONE_BRICKS).solid()));
    public static final Block GILDED_BLACKSTONE = Blocks.register("gilded_blackstone", new Block(AbstractBlock.Settings.copyShallow(BLACKSTONE).sounds(BlockSoundGroup.GILDED_BLACKSTONE)));
    public static final Block POLISHED_BLACKSTONE_STAIRS = Blocks.register("polished_blackstone_stairs", Blocks.createOldStairsBlock(POLISHED_BLACKSTONE));
    public static final Block POLISHED_BLACKSTONE_SLAB = Blocks.register("polished_blackstone_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(POLISHED_BLACKSTONE)));
    public static final Block POLISHED_BLACKSTONE_PRESSURE_PLATE = Blocks.register("polished_blackstone_pressure_plate", (Block)new PressurePlateBlock(BlockSetType.POLISHED_BLACKSTONE, AbstractBlock.Settings.create().mapColor(MapColor.BLACK).solid().instrument(NoteBlockInstrument.BASEDRUM).requiresTool().noCollision().strength(0.5f).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block POLISHED_BLACKSTONE_BUTTON = Blocks.register("polished_blackstone_button", Blocks.createStoneButtonBlock());
    public static final Block POLISHED_BLACKSTONE_WALL = Blocks.register("polished_blackstone_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(POLISHED_BLACKSTONE).solid()));
    public static final Block CHISELED_NETHER_BRICKS = Blocks.register("chiseled_nether_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f).sounds(BlockSoundGroup.NETHER_BRICKS)));
    public static final Block CRACKED_NETHER_BRICKS = Blocks.register("cracked_nether_bricks", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DARK_RED).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(2.0f, 6.0f).sounds(BlockSoundGroup.NETHER_BRICKS)));
    public static final Block QUARTZ_BRICKS = Blocks.register("quartz_bricks", new Block(AbstractBlock.Settings.copyShallow(QUARTZ_BLOCK)));
    public static final Block CANDLE = Blocks.register("candle", Blocks.createCandleBlock(MapColor.PALE_YELLOW));
    public static final Block WHITE_CANDLE = Blocks.register("white_candle", Blocks.createCandleBlock(MapColor.WHITE_GRAY));
    public static final Block ORANGE_CANDLE = Blocks.register("orange_candle", Blocks.createCandleBlock(MapColor.ORANGE));
    public static final Block MAGENTA_CANDLE = Blocks.register("magenta_candle", Blocks.createCandleBlock(MapColor.MAGENTA));
    public static final Block LIGHT_BLUE_CANDLE = Blocks.register("light_blue_candle", Blocks.createCandleBlock(MapColor.LIGHT_BLUE));
    public static final Block YELLOW_CANDLE = Blocks.register("yellow_candle", Blocks.createCandleBlock(MapColor.YELLOW));
    public static final Block LIME_CANDLE = Blocks.register("lime_candle", Blocks.createCandleBlock(MapColor.LIME));
    public static final Block PINK_CANDLE = Blocks.register("pink_candle", Blocks.createCandleBlock(MapColor.PINK));
    public static final Block GRAY_CANDLE = Blocks.register("gray_candle", Blocks.createCandleBlock(MapColor.GRAY));
    public static final Block LIGHT_GRAY_CANDLE = Blocks.register("light_gray_candle", Blocks.createCandleBlock(MapColor.LIGHT_GRAY));
    public static final Block CYAN_CANDLE = Blocks.register("cyan_candle", Blocks.createCandleBlock(MapColor.CYAN));
    public static final Block PURPLE_CANDLE = Blocks.register("purple_candle", Blocks.createCandleBlock(MapColor.PURPLE));
    public static final Block BLUE_CANDLE = Blocks.register("blue_candle", Blocks.createCandleBlock(MapColor.BLUE));
    public static final Block BROWN_CANDLE = Blocks.register("brown_candle", Blocks.createCandleBlock(MapColor.BROWN));
    public static final Block GREEN_CANDLE = Blocks.register("green_candle", Blocks.createCandleBlock(MapColor.GREEN));
    public static final Block RED_CANDLE = Blocks.register("red_candle", Blocks.createCandleBlock(MapColor.RED));
    public static final Block BLACK_CANDLE = Blocks.register("black_candle", Blocks.createCandleBlock(MapColor.BLACK));
    public static final Block CANDLE_CAKE = Blocks.register("candle_cake", (Block)new CandleCakeBlock(CANDLE, AbstractBlock.Settings.copyShallow(CAKE).luminance(Blocks.createLightLevelFromLitBlockState(3))));
    public static final Block WHITE_CANDLE_CAKE = Blocks.register("white_candle_cake", (Block)new CandleCakeBlock(WHITE_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block ORANGE_CANDLE_CAKE = Blocks.register("orange_candle_cake", (Block)new CandleCakeBlock(ORANGE_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block MAGENTA_CANDLE_CAKE = Blocks.register("magenta_candle_cake", (Block)new CandleCakeBlock(MAGENTA_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block LIGHT_BLUE_CANDLE_CAKE = Blocks.register("light_blue_candle_cake", (Block)new CandleCakeBlock(LIGHT_BLUE_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block YELLOW_CANDLE_CAKE = Blocks.register("yellow_candle_cake", (Block)new CandleCakeBlock(YELLOW_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block LIME_CANDLE_CAKE = Blocks.register("lime_candle_cake", (Block)new CandleCakeBlock(LIME_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block PINK_CANDLE_CAKE = Blocks.register("pink_candle_cake", (Block)new CandleCakeBlock(PINK_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block GRAY_CANDLE_CAKE = Blocks.register("gray_candle_cake", (Block)new CandleCakeBlock(GRAY_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block LIGHT_GRAY_CANDLE_CAKE = Blocks.register("light_gray_candle_cake", (Block)new CandleCakeBlock(LIGHT_GRAY_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block CYAN_CANDLE_CAKE = Blocks.register("cyan_candle_cake", (Block)new CandleCakeBlock(CYAN_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block PURPLE_CANDLE_CAKE = Blocks.register("purple_candle_cake", (Block)new CandleCakeBlock(PURPLE_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block BLUE_CANDLE_CAKE = Blocks.register("blue_candle_cake", (Block)new CandleCakeBlock(BLUE_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block BROWN_CANDLE_CAKE = Blocks.register("brown_candle_cake", (Block)new CandleCakeBlock(BROWN_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block GREEN_CANDLE_CAKE = Blocks.register("green_candle_cake", (Block)new CandleCakeBlock(GREEN_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block RED_CANDLE_CAKE = Blocks.register("red_candle_cake", (Block)new CandleCakeBlock(RED_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block BLACK_CANDLE_CAKE = Blocks.register("black_candle_cake", (Block)new CandleCakeBlock(BLACK_CANDLE, AbstractBlock.Settings.copyShallow(CANDLE_CAKE)));
    public static final Block AMETHYST_BLOCK = Blocks.register("amethyst_block", (Block)new AmethystBlock(AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).strength(1.5f).sounds(BlockSoundGroup.AMETHYST_BLOCK).requiresTool()));
    public static final Block BUDDING_AMETHYST = Blocks.register("budding_amethyst", (Block)new BuddingAmethystBlock(AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).ticksRandomly().strength(1.5f).sounds(BlockSoundGroup.AMETHYST_BLOCK).requiresTool().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block AMETHYST_CLUSTER = Blocks.register("amethyst_cluster", (Block)new AmethystClusterBlock(7.0f, 3.0f, AbstractBlock.Settings.create().mapColor(MapColor.PURPLE).solid().nonOpaque().sounds(BlockSoundGroup.AMETHYST_CLUSTER).strength(1.5f).luminance(state -> 5).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block LARGE_AMETHYST_BUD = Blocks.register("large_amethyst_bud", (Block)new AmethystClusterBlock(5.0f, 3.0f, AbstractBlock.Settings.copyShallow(AMETHYST_CLUSTER).sounds(BlockSoundGroup.MEDIUM_AMETHYST_BUD).luminance(state -> 4)));
    public static final Block MEDIUM_AMETHYST_BUD = Blocks.register("medium_amethyst_bud", (Block)new AmethystClusterBlock(4.0f, 3.0f, AbstractBlock.Settings.copyShallow(AMETHYST_CLUSTER).sounds(BlockSoundGroup.LARGE_AMETHYST_BUD).luminance(state -> 2)));
    public static final Block SMALL_AMETHYST_BUD = Blocks.register("small_amethyst_bud", (Block)new AmethystClusterBlock(3.0f, 4.0f, AbstractBlock.Settings.copyShallow(AMETHYST_CLUSTER).sounds(BlockSoundGroup.SMALL_AMETHYST_BUD).luminance(state -> 1)));
    public static final Block TUFF = Blocks.register("tuff", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_GRAY).instrument(NoteBlockInstrument.BASEDRUM).sounds(BlockSoundGroup.TUFF).requiresTool().strength(1.5f, 6.0f)));
    public static final Block TUFF_SLAB = Blocks.register("tuff_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(TUFF)));
    public static final Block TUFF_STAIRS = Blocks.register("tuff_stairs", (Block)new StairsBlock(TUFF.getDefaultState(), AbstractBlock.Settings.copyShallow(TUFF)));
    public static final Block TUFF_WALL = Blocks.register("tuff_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(TUFF).solid()));
    public static final Block POLISHED_TUFF = Blocks.register("polished_tuff", new Block(AbstractBlock.Settings.copyShallow(TUFF).sounds(BlockSoundGroup.POLISHED_TUFF)));
    public static final Block POLISHED_TUFF_SLAB = Blocks.register("polished_tuff_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(POLISHED_TUFF)));
    public static final Block POLISHED_TUFF_STAIRS = Blocks.register("polished_tuff_stairs", (Block)new StairsBlock(POLISHED_TUFF.getDefaultState(), AbstractBlock.Settings.copyShallow(POLISHED_TUFF)));
    public static final Block POLISHED_TUFF_WALL = Blocks.register("polished_tuff_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(POLISHED_TUFF).solid()));
    public static final Block CHISELED_TUFF = Blocks.register("chiseled_tuff", new Block(AbstractBlock.Settings.copyShallow(TUFF)));
    public static final Block TUFF_BRICKS = Blocks.register("tuff_bricks", new Block(AbstractBlock.Settings.copyShallow(TUFF).sounds(BlockSoundGroup.TUFF_BRICKS)));
    public static final Block TUFF_BRICK_SLAB = Blocks.register("tuff_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(TUFF_BRICKS)));
    public static final Block TUFF_BRICK_STAIRS = Blocks.register("tuff_brick_stairs", (Block)new StairsBlock(TUFF_BRICKS.getDefaultState(), AbstractBlock.Settings.copyShallow(TUFF_BRICKS)));
    public static final Block TUFF_BRICK_WALL = Blocks.register("tuff_brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(TUFF_BRICKS).solid()));
    public static final Block CHISELED_TUFF_BRICKS = Blocks.register("chiseled_tuff_bricks", new Block(AbstractBlock.Settings.copyShallow(TUFF_BRICKS)));
    public static final Block CALCITE = Blocks.register("calcite", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASEDRUM).sounds(BlockSoundGroup.CALCITE).requiresTool().strength(0.75f)));
    public static final Block TINTED_GLASS = Blocks.register("tinted_glass", (Block)new TintedGlassBlock(AbstractBlock.Settings.copyShallow(GLASS).mapColor(MapColor.GRAY).nonOpaque().allowsSpawning(Blocks::never).solidBlock(Blocks::never).suffocates(Blocks::never).blockVision(Blocks::never)));
    public static final Block POWDER_SNOW = Blocks.register("powder_snow", (Block)new PowderSnowBlock(AbstractBlock.Settings.create().mapColor(MapColor.WHITE).strength(0.25f).sounds(BlockSoundGroup.POWDER_SNOW).dynamicBounds().solidBlock(Blocks::never)));
    public static final Block SCULK_SENSOR = Blocks.register("sculk_sensor", (Block)new SculkSensorBlock(AbstractBlock.Settings.create().mapColor(MapColor.CYAN).strength(1.5f).sounds(BlockSoundGroup.SCULK_SENSOR).luminance(state -> 1).emissiveLighting((state, world, pos) -> SculkSensorBlock.getPhase(state) == SculkSensorPhase.ACTIVE)));
    public static final Block CALIBRATED_SCULK_SENSOR = Blocks.register("calibrated_sculk_sensor", (Block)new CalibratedSculkSensorBlock(AbstractBlock.Settings.copyShallow(SCULK_SENSOR)));
    public static final Block SCULK = Blocks.register("sculk", (Block)new SculkBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).strength(0.2f).sounds(BlockSoundGroup.SCULK)));
    public static final Block SCULK_VEIN = Blocks.register("sculk_vein", (Block)new SculkVeinBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).solid().noCollision().strength(0.2f).sounds(BlockSoundGroup.SCULK_VEIN).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SCULK_CATALYST = Blocks.register("sculk_catalyst", (Block)new SculkCatalystBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).strength(3.0f, 3.0f).sounds(BlockSoundGroup.SCULK_CATALYST).luminance(state -> 6)));
    public static final Block SCULK_SHRIEKER = Blocks.register("sculk_shrieker", (Block)new SculkShriekerBlock(AbstractBlock.Settings.create().mapColor(MapColor.BLACK).strength(3.0f, 3.0f).sounds(BlockSoundGroup.SCULK_SHRIEKER)));
    public static final Block COPPER_BLOCK = Blocks.register("copper_block", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.UNAFFECTED, AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).requiresTool().strength(3.0f, 6.0f).sounds(BlockSoundGroup.COPPER)));
    public static final Block EXPOSED_COPPER = Blocks.register("exposed_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.EXPOSED, AbstractBlock.Settings.copy(COPPER_BLOCK).mapColor(MapColor.TERRACOTTA_LIGHT_GRAY)));
    public static final Block WEATHERED_COPPER = Blocks.register("weathered_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.WEATHERED, AbstractBlock.Settings.copy(COPPER_BLOCK).mapColor(MapColor.DARK_AQUA)));
    public static final Block OXIDIZED_COPPER = Blocks.register("oxidized_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.OXIDIZED, AbstractBlock.Settings.copy(COPPER_BLOCK).mapColor(MapColor.TEAL)));
    public static final Block COPPER_ORE = Blocks.register("copper_ore", (Block)new ExperienceDroppingBlock(ConstantIntProvider.create(0), AbstractBlock.Settings.copyShallow(IRON_ORE)));
    public static final Block DEEPSLATE_COPPER_ORE = Blocks.register("deepslate_copper_ore", (Block)new ExperienceDroppingBlock(ConstantIntProvider.create(0), AbstractBlock.Settings.copyShallow(COPPER_ORE).mapColor(MapColor.DEEPSLATE_GRAY).strength(4.5f, 3.0f).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block OXIDIZED_CUT_COPPER = Blocks.register("oxidized_cut_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.OXIDIZED, AbstractBlock.Settings.copy(OXIDIZED_COPPER)));
    public static final Block WEATHERED_CUT_COPPER = Blocks.register("weathered_cut_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.WEATHERED, AbstractBlock.Settings.copy(WEATHERED_COPPER)));
    public static final Block EXPOSED_CUT_COPPER = Blocks.register("exposed_cut_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.EXPOSED, AbstractBlock.Settings.copy(EXPOSED_COPPER)));
    public static final Block CUT_COPPER = Blocks.register("cut_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.UNAFFECTED, AbstractBlock.Settings.copy(COPPER_BLOCK)));
    public static final Block OXIDIZED_CHISELED_COPPER = Blocks.register("oxidized_chiseled_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.OXIDIZED, AbstractBlock.Settings.copy(OXIDIZED_COPPER)));
    public static final Block WEATHERED_CHISELED_COPPER = Blocks.register("weathered_chiseled_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.WEATHERED, AbstractBlock.Settings.copy(WEATHERED_COPPER)));
    public static final Block EXPOSED_CHISELED_COPPER = Blocks.register("exposed_chiseled_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.EXPOSED, AbstractBlock.Settings.copy(EXPOSED_COPPER)));
    public static final Block CHISELED_COPPER = Blocks.register("chiseled_copper", (Block)new OxidizableBlock(Oxidizable.OxidationLevel.UNAFFECTED, AbstractBlock.Settings.copy(COPPER_BLOCK)));
    public static final Block WAXED_OXIDIZED_CHISELED_COPPER = Blocks.register("waxed_oxidized_chiseled_copper", new Block(AbstractBlock.Settings.copy(OXIDIZED_CHISELED_COPPER)));
    public static final Block WAXED_WEATHERED_CHISELED_COPPER = Blocks.register("waxed_weathered_chiseled_copper", new Block(AbstractBlock.Settings.copy(WEATHERED_CHISELED_COPPER)));
    public static final Block WAXED_EXPOSED_CHISELED_COPPER = Blocks.register("waxed_exposed_chiseled_copper", new Block(AbstractBlock.Settings.copy(EXPOSED_CHISELED_COPPER)));
    public static final Block WAXED_CHISELED_COPPER = Blocks.register("waxed_chiseled_copper", new Block(AbstractBlock.Settings.copy(CHISELED_COPPER)));
    public static final Block OXIDIZED_CUT_COPPER_STAIRS = Blocks.register("oxidized_cut_copper_stairs", (Block)new OxidizableStairsBlock(Oxidizable.OxidationLevel.OXIDIZED, OXIDIZED_CUT_COPPER.getDefaultState(), AbstractBlock.Settings.copy(OXIDIZED_CUT_COPPER)));
    public static final Block WEATHERED_CUT_COPPER_STAIRS = Blocks.register("weathered_cut_copper_stairs", (Block)new OxidizableStairsBlock(Oxidizable.OxidationLevel.WEATHERED, WEATHERED_CUT_COPPER.getDefaultState(), AbstractBlock.Settings.copy(WEATHERED_COPPER)));
    public static final Block EXPOSED_CUT_COPPER_STAIRS = Blocks.register("exposed_cut_copper_stairs", (Block)new OxidizableStairsBlock(Oxidizable.OxidationLevel.EXPOSED, EXPOSED_CUT_COPPER.getDefaultState(), AbstractBlock.Settings.copy(EXPOSED_COPPER)));
    public static final Block CUT_COPPER_STAIRS = Blocks.register("cut_copper_stairs", (Block)new OxidizableStairsBlock(Oxidizable.OxidationLevel.UNAFFECTED, CUT_COPPER.getDefaultState(), AbstractBlock.Settings.copy(COPPER_BLOCK)));
    public static final Block OXIDIZED_CUT_COPPER_SLAB = Blocks.register("oxidized_cut_copper_slab", (Block)new OxidizableSlabBlock(Oxidizable.OxidationLevel.OXIDIZED, AbstractBlock.Settings.copy(OXIDIZED_CUT_COPPER)));
    public static final Block WEATHERED_CUT_COPPER_SLAB = Blocks.register("weathered_cut_copper_slab", (Block)new OxidizableSlabBlock(Oxidizable.OxidationLevel.WEATHERED, AbstractBlock.Settings.copy(WEATHERED_CUT_COPPER)));
    public static final Block EXPOSED_CUT_COPPER_SLAB = Blocks.register("exposed_cut_copper_slab", (Block)new OxidizableSlabBlock(Oxidizable.OxidationLevel.EXPOSED, AbstractBlock.Settings.copy(EXPOSED_CUT_COPPER)));
    public static final Block CUT_COPPER_SLAB = Blocks.register("cut_copper_slab", (Block)new OxidizableSlabBlock(Oxidizable.OxidationLevel.UNAFFECTED, AbstractBlock.Settings.copy(CUT_COPPER)));
    public static final Block WAXED_COPPER_BLOCK = Blocks.register("waxed_copper_block", new Block(AbstractBlock.Settings.copy(COPPER_BLOCK)));
    public static final Block WAXED_WEATHERED_COPPER = Blocks.register("waxed_weathered_copper", new Block(AbstractBlock.Settings.copy(WEATHERED_COPPER)));
    public static final Block WAXED_EXPOSED_COPPER = Blocks.register("waxed_exposed_copper", new Block(AbstractBlock.Settings.copy(EXPOSED_COPPER)));
    public static final Block WAXED_OXIDIZED_COPPER = Blocks.register("waxed_oxidized_copper", new Block(AbstractBlock.Settings.copy(OXIDIZED_COPPER)));
    public static final Block WAXED_OXIDIZED_CUT_COPPER = Blocks.register("waxed_oxidized_cut_copper", new Block(AbstractBlock.Settings.copy(OXIDIZED_COPPER)));
    public static final Block WAXED_WEATHERED_CUT_COPPER = Blocks.register("waxed_weathered_cut_copper", new Block(AbstractBlock.Settings.copy(WEATHERED_COPPER)));
    public static final Block WAXED_EXPOSED_CUT_COPPER = Blocks.register("waxed_exposed_cut_copper", new Block(AbstractBlock.Settings.copy(EXPOSED_COPPER)));
    public static final Block WAXED_CUT_COPPER = Blocks.register("waxed_cut_copper", new Block(AbstractBlock.Settings.copy(COPPER_BLOCK)));
    public static final Block WAXED_OXIDIZED_CUT_COPPER_STAIRS = Blocks.register("waxed_oxidized_cut_copper_stairs", Blocks.createStairsBlock(WAXED_OXIDIZED_CUT_COPPER));
    public static final Block WAXED_WEATHERED_CUT_COPPER_STAIRS = Blocks.register("waxed_weathered_cut_copper_stairs", Blocks.createStairsBlock(WAXED_WEATHERED_CUT_COPPER));
    public static final Block WAXED_EXPOSED_CUT_COPPER_STAIRS = Blocks.register("waxed_exposed_cut_copper_stairs", Blocks.createStairsBlock(WAXED_EXPOSED_CUT_COPPER));
    public static final Block WAXED_CUT_COPPER_STAIRS = Blocks.register("waxed_cut_copper_stairs", Blocks.createStairsBlock(WAXED_CUT_COPPER));
    public static final Block WAXED_OXIDIZED_CUT_COPPER_SLAB = Blocks.register("waxed_oxidized_cut_copper_slab", (Block)new SlabBlock(AbstractBlock.Settings.copy(WAXED_OXIDIZED_CUT_COPPER).requiresTool()));
    public static final Block WAXED_WEATHERED_CUT_COPPER_SLAB = Blocks.register("waxed_weathered_cut_copper_slab", (Block)new SlabBlock(AbstractBlock.Settings.copy(WAXED_WEATHERED_CUT_COPPER).requiresTool()));
    public static final Block WAXED_EXPOSED_CUT_COPPER_SLAB = Blocks.register("waxed_exposed_cut_copper_slab", (Block)new SlabBlock(AbstractBlock.Settings.copy(WAXED_EXPOSED_CUT_COPPER).requiresTool()));
    public static final Block WAXED_CUT_COPPER_SLAB = Blocks.register("waxed_cut_copper_slab", (Block)new SlabBlock(AbstractBlock.Settings.copy(WAXED_CUT_COPPER).requiresTool()));
    public static final Block COPPER_DOOR = Blocks.register("copper_door", (Block)new OxidizableDoorBlock(BlockSetType.COPPER, Oxidizable.OxidationLevel.UNAFFECTED, AbstractBlock.Settings.create().mapColor(COPPER_BLOCK.getDefaultMapColor()).strength(3.0f, 6.0f).nonOpaque().requiresTool().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block EXPOSED_COPPER_DOOR = Blocks.register("exposed_copper_door", (Block)new OxidizableDoorBlock(BlockSetType.COPPER, Oxidizable.OxidationLevel.EXPOSED, AbstractBlock.Settings.copy(COPPER_DOOR).mapColor(EXPOSED_COPPER.getDefaultMapColor())));
    public static final Block OXIDIZED_COPPER_DOOR = Blocks.register("oxidized_copper_door", (Block)new OxidizableDoorBlock(BlockSetType.COPPER, Oxidizable.OxidationLevel.OXIDIZED, AbstractBlock.Settings.copy(COPPER_DOOR).mapColor(OXIDIZED_COPPER.getDefaultMapColor())));
    public static final Block WEATHERED_COPPER_DOOR = Blocks.register("weathered_copper_door", (Block)new OxidizableDoorBlock(BlockSetType.COPPER, Oxidizable.OxidationLevel.WEATHERED, AbstractBlock.Settings.copy(COPPER_DOOR).mapColor(WEATHERED_COPPER.getDefaultMapColor())));
    public static final Block WAXED_COPPER_DOOR = Blocks.register("waxed_copper_door", (Block)new DoorBlock(BlockSetType.COPPER, AbstractBlock.Settings.copy(COPPER_DOOR)));
    public static final Block WAXED_EXPOSED_COPPER_DOOR = Blocks.register("waxed_exposed_copper_door", (Block)new DoorBlock(BlockSetType.COPPER, AbstractBlock.Settings.copy(EXPOSED_COPPER_DOOR)));
    public static final Block WAXED_OXIDIZED_COPPER_DOOR = Blocks.register("waxed_oxidized_copper_door", (Block)new DoorBlock(BlockSetType.COPPER, AbstractBlock.Settings.copy(OXIDIZED_COPPER_DOOR)));
    public static final Block WAXED_WEATHERED_COPPER_DOOR = Blocks.register("waxed_weathered_copper_door", (Block)new DoorBlock(BlockSetType.COPPER, AbstractBlock.Settings.copy(WEATHERED_COPPER_DOOR)));
    public static final Block COPPER_TRAPDOOR = Blocks.register("copper_trapdoor", (Block)new OxidizableTrapdoorBlock(BlockSetType.COPPER, Oxidizable.OxidationLevel.UNAFFECTED, AbstractBlock.Settings.create().mapColor(COPPER_BLOCK.getDefaultMapColor()).strength(3.0f, 6.0f).requiresTool().nonOpaque().allowsSpawning(Blocks::never)));
    public static final Block EXPOSED_COPPER_TRAPDOOR = Blocks.register("exposed_copper_trapdoor", (Block)new OxidizableTrapdoorBlock(BlockSetType.COPPER, Oxidizable.OxidationLevel.EXPOSED, AbstractBlock.Settings.copy(COPPER_TRAPDOOR).mapColor(EXPOSED_COPPER.getDefaultMapColor())));
    public static final Block OXIDIZED_COPPER_TRAPDOOR = Blocks.register("oxidized_copper_trapdoor", (Block)new OxidizableTrapdoorBlock(BlockSetType.COPPER, Oxidizable.OxidationLevel.OXIDIZED, AbstractBlock.Settings.copy(COPPER_TRAPDOOR).mapColor(OXIDIZED_COPPER.getDefaultMapColor())));
    public static final Block WEATHERED_COPPER_TRAPDOOR = Blocks.register("weathered_copper_trapdoor", (Block)new OxidizableTrapdoorBlock(BlockSetType.COPPER, Oxidizable.OxidationLevel.WEATHERED, AbstractBlock.Settings.copy(COPPER_TRAPDOOR).mapColor(WEATHERED_COPPER.getDefaultMapColor())));
    public static final Block WAXED_COPPER_TRAPDOOR = Blocks.register("waxed_copper_trapdoor", (Block)new TrapdoorBlock(BlockSetType.COPPER, AbstractBlock.Settings.copy(COPPER_TRAPDOOR)));
    public static final Block WAXED_EXPOSED_COPPER_TRAPDOOR = Blocks.register("waxed_exposed_copper_trapdoor", (Block)new TrapdoorBlock(BlockSetType.COPPER, AbstractBlock.Settings.copy(EXPOSED_COPPER_TRAPDOOR)));
    public static final Block WAXED_OXIDIZED_COPPER_TRAPDOOR = Blocks.register("waxed_oxidized_copper_trapdoor", (Block)new TrapdoorBlock(BlockSetType.COPPER, AbstractBlock.Settings.copy(OXIDIZED_COPPER_TRAPDOOR)));
    public static final Block WAXED_WEATHERED_COPPER_TRAPDOOR = Blocks.register("waxed_weathered_copper_trapdoor", (Block)new TrapdoorBlock(BlockSetType.COPPER, AbstractBlock.Settings.copy(WEATHERED_COPPER_TRAPDOOR)));
    public static final Block COPPER_GRATE = Blocks.register("copper_grate", (Block)new OxidizableGrateBlock(Oxidizable.OxidationLevel.UNAFFECTED, AbstractBlock.Settings.create().strength(3.0f, 6.0f).sounds(BlockSoundGroup.COPPER_GRATE).mapColor(MapColor.ORANGE).nonOpaque().requiresTool().allowsSpawning(Blocks::never).solidBlock(Blocks::never).suffocates(Blocks::never).blockVision(Blocks::never)));
    public static final Block EXPOSED_COPPER_GRATE = Blocks.register("exposed_copper_grate", (Block)new OxidizableGrateBlock(Oxidizable.OxidationLevel.EXPOSED, AbstractBlock.Settings.copy(COPPER_GRATE).mapColor(MapColor.TERRACOTTA_LIGHT_GRAY)));
    public static final Block WEATHERED_COPPER_GRATE = Blocks.register("weathered_copper_grate", (Block)new OxidizableGrateBlock(Oxidizable.OxidationLevel.WEATHERED, AbstractBlock.Settings.copy(COPPER_GRATE).mapColor(MapColor.DARK_AQUA)));
    public static final Block OXIDIZED_COPPER_GRATE = Blocks.register("oxidized_copper_grate", (Block)new OxidizableGrateBlock(Oxidizable.OxidationLevel.OXIDIZED, AbstractBlock.Settings.copy(COPPER_GRATE).mapColor(MapColor.TEAL)));
    public static final Block WAXED_COPPER_GRATE = Blocks.register("waxed_copper_grate", (Block)new GrateBlock(AbstractBlock.Settings.copy(COPPER_GRATE)));
    public static final Block WAXED_EXPOSED_COPPER_GRATE = Blocks.register("waxed_exposed_copper_grate", (Block)new GrateBlock(AbstractBlock.Settings.copy(EXPOSED_COPPER_GRATE)));
    public static final Block WAXED_WEATHERED_COPPER_GRATE = Blocks.register("waxed_weathered_copper_grate", (Block)new GrateBlock(AbstractBlock.Settings.copy(WEATHERED_COPPER_GRATE)));
    public static final Block WAXED_OXIDIZED_COPPER_GRATE = Blocks.register("waxed_oxidized_copper_grate", (Block)new GrateBlock(AbstractBlock.Settings.copy(OXIDIZED_COPPER_GRATE)));
    public static final Block COPPER_BULB = Blocks.register("copper_bulb", (Block)new OxidizableBulbBlock(Oxidizable.OxidationLevel.UNAFFECTED, AbstractBlock.Settings.create().mapColor(COPPER_BLOCK.getDefaultMapColor()).strength(3.0f, 6.0f).sounds(BlockSoundGroup.COPPER_BULB).requiresTool().solidBlock(Blocks::never).luminance(Blocks.createLightLevelFromLitBlockState(15))));
    public static final Block EXPOSED_COPPER_BULB = Blocks.register("exposed_copper_bulb", (Block)new OxidizableBulbBlock(Oxidizable.OxidationLevel.EXPOSED, AbstractBlock.Settings.copy(COPPER_BULB).mapColor(MapColor.TERRACOTTA_LIGHT_GRAY).luminance(Blocks.createLightLevelFromLitBlockState(12))));
    public static final Block WEATHERED_COPPER_BULB = Blocks.register("weathered_copper_bulb", (Block)new OxidizableBulbBlock(Oxidizable.OxidationLevel.WEATHERED, AbstractBlock.Settings.copy(COPPER_BULB).mapColor(MapColor.DARK_AQUA).luminance(Blocks.createLightLevelFromLitBlockState(8))));
    public static final Block OXIDIZED_COPPER_BULB = Blocks.register("oxidized_copper_bulb", (Block)new OxidizableBulbBlock(Oxidizable.OxidationLevel.OXIDIZED, AbstractBlock.Settings.copy(COPPER_BULB).mapColor(MapColor.TEAL).luminance(Blocks.createLightLevelFromLitBlockState(4))));
    public static final Block WAXED_COPPER_BULB = Blocks.register("waxed_copper_bulb", (Block)new BulbBlock(AbstractBlock.Settings.copy(COPPER_BULB)));
    public static final Block WAXED_EXPOSED_COPPER_BULB = Blocks.register("waxed_exposed_copper_bulb", (Block)new BulbBlock(AbstractBlock.Settings.copy(EXPOSED_COPPER_BULB)));
    public static final Block WAXED_WEATHERED_COPPER_BULB = Blocks.register("waxed_weathered_copper_bulb", (Block)new BulbBlock(AbstractBlock.Settings.copy(WEATHERED_COPPER_BULB)));
    public static final Block WAXED_OXIDIZED_COPPER_BULB = Blocks.register("waxed_oxidized_copper_bulb", (Block)new BulbBlock(AbstractBlock.Settings.copy(OXIDIZED_COPPER_BULB)));
    public static final Block LIGHTNING_ROD = Blocks.register("lightning_rod", (Block)new LightningRodBlock(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).solid().requiresTool().strength(3.0f, 6.0f).sounds(BlockSoundGroup.COPPER).nonOpaque()));
    public static final Block POINTED_DRIPSTONE = Blocks.register("pointed_dripstone", (Block)new PointedDripstoneBlock(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_BROWN).solid().instrument(NoteBlockInstrument.BASEDRUM).nonOpaque().sounds(BlockSoundGroup.POINTED_DRIPSTONE).ticksRandomly().strength(1.5f, 3.0f).dynamicBounds().offset(AbstractBlock.OffsetType.XZ).pistonBehavior(PistonBehavior.DESTROY).solidBlock(Blocks::never)));
    public static final Block DRIPSTONE_BLOCK = Blocks.register("dripstone_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASEDRUM).sounds(BlockSoundGroup.DRIPSTONE_BLOCK).requiresTool().strength(1.5f, 1.0f)));
    public static final Block CAVE_VINES = Blocks.register("cave_vines", (Block)new CaveVinesHeadBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).ticksRandomly().noCollision().luminance(CaveVines.getLuminanceSupplier(14)).breakInstantly().sounds(BlockSoundGroup.CAVE_VINES).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block CAVE_VINES_PLANT = Blocks.register("cave_vines_plant", (Block)new CaveVinesBodyBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().luminance(CaveVines.getLuminanceSupplier(14)).breakInstantly().sounds(BlockSoundGroup.CAVE_VINES).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SPORE_BLOSSOM = Blocks.register("spore_blossom", (Block)new SporeBlossomBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).breakInstantly().noCollision().sounds(BlockSoundGroup.SPORE_BLOSSOM).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block AZALEA = Blocks.register("azalea", (Block)new AzaleaBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).notSolid().breakInstantly().sounds(BlockSoundGroup.AZALEA).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block FLOWERING_AZALEA = Blocks.register("flowering_azalea", (Block)new AzaleaBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).notSolid().breakInstantly().sounds(BlockSoundGroup.FLOWERING_AZALEA).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block MOSS_CARPET = Blocks.register("moss_carpet", (Block)new CarpetBlock(AbstractBlock.Settings.create().mapColor(MapColor.GREEN).strength(0.1f).sounds(BlockSoundGroup.MOSS_CARPET).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block PINK_PETALS = Blocks.register("pink_petals", (Block)new FlowerbedBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().sounds(BlockSoundGroup.PINK_PETALS).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block MOSS_BLOCK = Blocks.register("moss_block", (Block)new MossBlock(AbstractBlock.Settings.create().mapColor(MapColor.GREEN).strength(0.1f).sounds(BlockSoundGroup.MOSS_BLOCK).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BIG_DRIPLEAF = Blocks.register("big_dripleaf", (Block)new BigDripleafBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).notSolid().strength(0.1f).sounds(BlockSoundGroup.BIG_DRIPLEAF).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block BIG_DRIPLEAF_STEM = Blocks.register("big_dripleaf_stem", (Block)new BigDripleafStemBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().strength(0.1f).sounds(BlockSoundGroup.BIG_DRIPLEAF).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block SMALL_DRIPLEAF = Blocks.register("small_dripleaf", (Block)new SmallDripleafBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.SMALL_DRIPLEAF).offset(AbstractBlock.OffsetType.XYZ).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block HANGING_ROOTS = Blocks.register("hanging_roots", (Block)new HangingRootsBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).replaceable().noCollision().breakInstantly().sounds(BlockSoundGroup.HANGING_ROOTS).offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block ROOTED_DIRT = Blocks.register("rooted_dirt", (Block)new RootedDirtBlock(AbstractBlock.Settings.create().mapColor(MapColor.DIRT_BROWN).strength(0.5f).sounds(BlockSoundGroup.ROOTED_DIRT)));
    public static final Block MUD = Blocks.register("mud", (Block)new MudBlock(AbstractBlock.Settings.copyShallow(DIRT).mapColor(MapColor.TERRACOTTA_CYAN).allowsSpawning(Blocks::always).solidBlock(Blocks::always).blockVision(Blocks::always).suffocates(Blocks::always).sounds(BlockSoundGroup.MUD)));
    public static final Block DEEPSLATE = Blocks.register("deepslate", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.DEEPSLATE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(3.0f, 6.0f).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block COBBLED_DEEPSLATE = Blocks.register("cobbled_deepslate", new Block(AbstractBlock.Settings.copyShallow(DEEPSLATE).strength(3.5f, 6.0f)));
    public static final Block COBBLED_DEEPSLATE_STAIRS = Blocks.register("cobbled_deepslate_stairs", Blocks.createOldStairsBlock(COBBLED_DEEPSLATE));
    public static final Block COBBLED_DEEPSLATE_SLAB = Blocks.register("cobbled_deepslate_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(COBBLED_DEEPSLATE)));
    public static final Block COBBLED_DEEPSLATE_WALL = Blocks.register("cobbled_deepslate_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(COBBLED_DEEPSLATE).solid()));
    public static final Block POLISHED_DEEPSLATE = Blocks.register("polished_deepslate", new Block(AbstractBlock.Settings.copyShallow(COBBLED_DEEPSLATE).sounds(BlockSoundGroup.POLISHED_DEEPSLATE)));
    public static final Block POLISHED_DEEPSLATE_STAIRS = Blocks.register("polished_deepslate_stairs", Blocks.createOldStairsBlock(POLISHED_DEEPSLATE));
    public static final Block POLISHED_DEEPSLATE_SLAB = Blocks.register("polished_deepslate_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(POLISHED_DEEPSLATE)));
    public static final Block POLISHED_DEEPSLATE_WALL = Blocks.register("polished_deepslate_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(POLISHED_DEEPSLATE).solid()));
    public static final Block DEEPSLATE_TILES = Blocks.register("deepslate_tiles", new Block(AbstractBlock.Settings.copyShallow(COBBLED_DEEPSLATE).sounds(BlockSoundGroup.DEEPSLATE_TILES)));
    public static final Block DEEPSLATE_TILE_STAIRS = Blocks.register("deepslate_tile_stairs", Blocks.createOldStairsBlock(DEEPSLATE_TILES));
    public static final Block DEEPSLATE_TILE_SLAB = Blocks.register("deepslate_tile_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(DEEPSLATE_TILES)));
    public static final Block DEEPSLATE_TILE_WALL = Blocks.register("deepslate_tile_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(DEEPSLATE_TILES).solid()));
    public static final Block DEEPSLATE_BRICKS = Blocks.register("deepslate_bricks", new Block(AbstractBlock.Settings.copyShallow(COBBLED_DEEPSLATE).sounds(BlockSoundGroup.DEEPSLATE_BRICKS)));
    public static final Block DEEPSLATE_BRICK_STAIRS = Blocks.register("deepslate_brick_stairs", Blocks.createOldStairsBlock(DEEPSLATE_BRICKS));
    public static final Block DEEPSLATE_BRICK_SLAB = Blocks.register("deepslate_brick_slab", (Block)new SlabBlock(AbstractBlock.Settings.copyShallow(DEEPSLATE_BRICKS)));
    public static final Block DEEPSLATE_BRICK_WALL = Blocks.register("deepslate_brick_wall", (Block)new WallBlock(AbstractBlock.Settings.copyShallow(DEEPSLATE_BRICKS).solid()));
    public static final Block CHISELED_DEEPSLATE = Blocks.register("chiseled_deepslate", new Block(AbstractBlock.Settings.copyShallow(COBBLED_DEEPSLATE).sounds(BlockSoundGroup.DEEPSLATE_BRICKS)));
    public static final Block CRACKED_DEEPSLATE_BRICKS = Blocks.register("cracked_deepslate_bricks", new Block(AbstractBlock.Settings.copyShallow(DEEPSLATE_BRICKS)));
    public static final Block CRACKED_DEEPSLATE_TILES = Blocks.register("cracked_deepslate_tiles", new Block(AbstractBlock.Settings.copyShallow(DEEPSLATE_TILES)));
    public static final Block INFESTED_DEEPSLATE = Blocks.register("infested_deepslate", (Block)new RotatedInfestedBlock(DEEPSLATE, AbstractBlock.Settings.create().mapColor(MapColor.DEEPSLATE_GRAY).sounds(BlockSoundGroup.DEEPSLATE)));
    public static final Block SMOOTH_BASALT = Blocks.register("smooth_basalt", new Block(AbstractBlock.Settings.copyShallow(BASALT)));
    public static final Block RAW_IRON_BLOCK = Blocks.register("raw_iron_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.RAW_IRON_PINK).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(5.0f, 6.0f)));
    public static final Block RAW_COPPER_BLOCK = Blocks.register("raw_copper_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.ORANGE).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(5.0f, 6.0f)));
    public static final Block RAW_GOLD_BLOCK = Blocks.register("raw_gold_block", new Block(AbstractBlock.Settings.create().mapColor(MapColor.GOLD).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().strength(5.0f, 6.0f)));
    public static final Block POTTED_AZALEA_BUSH = Blocks.register("potted_azalea_bush", Blocks.createFlowerPotBlock(AZALEA));
    public static final Block POTTED_FLOWERING_AZALEA_BUSH = Blocks.register("potted_flowering_azalea_bush", Blocks.createFlowerPotBlock(FLOWERING_AZALEA));
    public static final Block OCHRE_FROGLIGHT = Blocks.register("ochre_froglight", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.PALE_YELLOW).strength(0.3f).luminance(state -> 15).sounds(BlockSoundGroup.FROGLIGHT)));
    public static final Block VERDANT_FROGLIGHT = Blocks.register("verdant_froglight", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.LICHEN_GREEN).strength(0.3f).luminance(state -> 15).sounds(BlockSoundGroup.FROGLIGHT)));
    public static final Block PEARLESCENT_FROGLIGHT = Blocks.register("pearlescent_froglight", (Block)new PillarBlock(AbstractBlock.Settings.create().mapColor(MapColor.PINK).strength(0.3f).luminance(state -> 15).sounds(BlockSoundGroup.FROGLIGHT)));
    public static final Block FROGSPAWN = Blocks.register("frogspawn", (Block)new FrogspawnBlock(AbstractBlock.Settings.create().mapColor(MapColor.WATER_BLUE).breakInstantly().nonOpaque().noCollision().sounds(BlockSoundGroup.FROGSPAWN).pistonBehavior(PistonBehavior.DESTROY)));
    public static final Block REINFORCED_DEEPSLATE = Blocks.register("reinforced_deepslate", new Block(AbstractBlock.Settings.create().mapColor(MapColor.DEEPSLATE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).sounds(BlockSoundGroup.DEEPSLATE).strength(55.0f, 1200.0f)));
    public static final Block DECORATED_POT = Blocks.register("decorated_pot", (Block)new DecoratedPotBlock(AbstractBlock.Settings.create().mapColor(MapColor.TERRACOTTA_RED).strength(0.0f, 0.0f).pistonBehavior(PistonBehavior.DESTROY).nonOpaque()));
    public static final Block CRAFTER = Blocks.register("crafter", (Block)new CrafterBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).strength(1.5f, 3.5f)));
    public static final Block TRIAL_SPAWNER = Blocks.register("trial_spawner", (Block)new TrialSpawnerBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).requiresTool().luminance(state -> state.get(TrialSpawnerBlock.TRIAL_SPAWNER_STATE).getLuminance()).strength(50.0f).sounds(BlockSoundGroup.TRIAL_SPAWNER).blockVision(Blocks::never).nonOpaque()));
    public static final Block VAULT = Blocks.register("vault", (Block)new VaultBlock(AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).instrument(NoteBlockInstrument.BASEDRUM).nonOpaque().requiresTool().sounds(BlockSoundGroup.VAULT).luminance(state -> state.get(VaultBlock.VAULT_STATE).getLuminance()).strength(50.0f).blockVision(Blocks::never)));
    public static final Block HEAVY_CORE = Blocks.register("heavy_core", (Block)new HeavyCoreBlock(AbstractBlock.Settings.create().mapColor(MapColor.IRON_GRAY).instrument(NoteBlockInstrument.SNARE).sounds(BlockSoundGroup.HEAVY_CORE).strength(10.0f).pistonBehavior(PistonBehavior.NORMAL).resistance(1200.0f)));

    private static ToIntFunction<BlockState> createLightLevelFromLitBlockState(int litLevel) {
        return state -> state.get(Properties.LIT) != false ? litLevel : 0;
    }

    private static Function<BlockState, MapColor> createMapColorFromWaterloggedBlockState(MapColor mapColor) {
        return state -> state.get(Properties.WATERLOGGED) != false ? MapColor.WATER_BLUE : mapColor;
    }

    private static Boolean never(BlockState state, BlockView world, BlockPos pos, EntityType<?> type) {
        return false;
    }

    private static Boolean always(BlockState state, BlockView world, BlockPos pos, EntityType<?> type) {
        return true;
    }

    private static Boolean canSpawnOnLeaves(BlockState state, BlockView world, BlockPos pos, EntityType<?> type) {
        return type == EntityType.OCELOT || type == EntityType.PARROT;
    }

    private static Block createBedBlock(DyeColor color) {
        return new BedBlock(color, AbstractBlock.Settings.create().mapColor(state -> state.get(BedBlock.PART) == BedPart.FOOT ? color.getMapColor() : MapColor.WHITE_GRAY).sounds(BlockSoundGroup.WOOD).strength(0.2f).nonOpaque().burnable().pistonBehavior(PistonBehavior.DESTROY));
    }

    private static Block createLogBlock(MapColor topMapColor, MapColor sideMapColor) {
        return new PillarBlock(AbstractBlock.Settings.create().mapColor(state -> state.get(PillarBlock.AXIS) == Direction.Axis.Y ? topMapColor : sideMapColor).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.WOOD).burnable());
    }

    private static Block createLogBlock(MapColor topMapColor, MapColor sideMapColor, BlockSoundGroup soundGroup) {
        return new PillarBlock(AbstractBlock.Settings.create().mapColor(state -> state.get(PillarBlock.AXIS) == Direction.Axis.Y ? topMapColor : sideMapColor).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(soundGroup).burnable());
    }

    private static Block createNetherStemBlock(MapColor mapColor) {
        return new PillarBlock(AbstractBlock.Settings.create().mapColor(state -> mapColor).instrument(NoteBlockInstrument.BASS).strength(2.0f).sounds(BlockSoundGroup.NETHER_STEM));
    }

    private static boolean always(BlockState state, BlockView world, BlockPos pos) {
        return true;
    }

    private static boolean never(BlockState state, BlockView world, BlockPos pos) {
        return false;
    }

    private static Block createStainedGlassBlock(DyeColor color) {
        return new StainedGlassBlock(color, AbstractBlock.Settings.create().mapColor(color).instrument(NoteBlockInstrument.HAT).strength(0.3f).sounds(BlockSoundGroup.GLASS).nonOpaque().allowsSpawning(Blocks::never).solidBlock(Blocks::never).suffocates(Blocks::never).blockVision(Blocks::never));
    }

    private static Block createLeavesBlock(BlockSoundGroup soundGroup) {
        return new LeavesBlock(AbstractBlock.Settings.create().mapColor(MapColor.DARK_GREEN).strength(0.2f).ticksRandomly().sounds(soundGroup).nonOpaque().allowsSpawning(Blocks::canSpawnOnLeaves).suffocates(Blocks::never).blockVision(Blocks::never).burnable().pistonBehavior(PistonBehavior.DESTROY).solidBlock(Blocks::never));
    }

    private static Block createShulkerBoxBlock(@Nullable DyeColor color, MapColor mapColor) {
        return new ShulkerBoxBlock(color, AbstractBlock.Settings.create().mapColor(mapColor).solid().strength(2.0f).dynamicBounds().nonOpaque().suffocates(SHULKER_BOX_SUFFOCATES_PREDICATE).blockVision(SHULKER_BOX_SUFFOCATES_PREDICATE).pistonBehavior(PistonBehavior.DESTROY));
    }

    private static Block createPistonBlock(boolean sticky) {
        AbstractBlock.ContextPredicate lv = (state, world, pos) -> state.get(PistonBlock.EXTENDED) == false;
        return new PistonBlock(sticky, AbstractBlock.Settings.create().mapColor(MapColor.STONE_GRAY).strength(1.5f).solidBlock(Blocks::never).suffocates(lv).blockVision(lv).pistonBehavior(PistonBehavior.BLOCK));
    }

    private static Block createWoodenButtonBlock(BlockSetType blockSetType) {
        return new ButtonBlock(blockSetType, 30, AbstractBlock.Settings.create().noCollision().strength(0.5f).pistonBehavior(PistonBehavior.DESTROY));
    }

    private static Block createStoneButtonBlock() {
        return new ButtonBlock(BlockSetType.STONE, 20, AbstractBlock.Settings.create().noCollision().strength(0.5f).pistonBehavior(PistonBehavior.DESTROY));
    }

    private static Block createFlowerPotBlock(Block flower) {
        return new FlowerPotBlock(flower, AbstractBlock.Settings.create().breakInstantly().nonOpaque().pistonBehavior(PistonBehavior.DESTROY));
    }

    private static Block createCandleBlock(MapColor color) {
        return new CandleBlock(AbstractBlock.Settings.create().mapColor(color).nonOpaque().strength(0.1f).sounds(BlockSoundGroup.CANDLE).luminance(CandleBlock.STATE_TO_LUMINANCE).pistonBehavior(PistonBehavior.DESTROY));
    }

    @Deprecated
    private static Block createOldStairsBlock(Block block) {
        return new StairsBlock(block.getDefaultState(), AbstractBlock.Settings.copyShallow(block));
    }

    private static Block createStairsBlock(Block base) {
        return new StairsBlock(base.getDefaultState(), AbstractBlock.Settings.copy(base));
    }

    public static Block register(String id, Block block) {
        return Registry.register(Registries.BLOCK, id, block);
    }

    public static Block register(RegistryKey<Block> key, Block block) {
        return Registry.register(Registries.BLOCK, key, block);
    }

    public static void refreshShapeCache() {
        Block.STATE_IDS.forEach(AbstractBlock.AbstractBlockState::initShapeCache);
    }

    /*
     * Opcode count of 14289 triggered aggressive code reduction.  Override with --aggressivesizethreshold.
     */
    static {
        for (Block lv : Registries.BLOCK) {
            for (BlockState lv2 : lv.getStateManager().getStates()) {
                Block.STATE_IDS.add(lv2);
                lv2.initShapeCache();
            }
            lv.getLootTableKey();
        }
    }
}

