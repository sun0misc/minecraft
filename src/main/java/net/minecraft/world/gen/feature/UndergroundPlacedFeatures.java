package net.minecraft.world.gen.feature;

import net.minecraft.registry.Registerable;
import net.minecraft.registry.RegistryEntryLookup;
import net.minecraft.registry.RegistryKey;
import net.minecraft.registry.RegistryKeys;
import net.minecraft.registry.entry.RegistryEntry;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.intprovider.ClampedNormalIntProvider;
import net.minecraft.util.math.intprovider.ConstantIntProvider;
import net.minecraft.util.math.intprovider.UniformIntProvider;
import net.minecraft.world.Heightmap;
import net.minecraft.world.gen.YOffset;
import net.minecraft.world.gen.blockpredicate.BlockPredicate;
import net.minecraft.world.gen.placementmodifier.BiomePlacementModifier;
import net.minecraft.world.gen.placementmodifier.CountPlacementModifier;
import net.minecraft.world.gen.placementmodifier.EnvironmentScanPlacementModifier;
import net.minecraft.world.gen.placementmodifier.HeightRangePlacementModifier;
import net.minecraft.world.gen.placementmodifier.PlacementModifier;
import net.minecraft.world.gen.placementmodifier.RandomOffsetPlacementModifier;
import net.minecraft.world.gen.placementmodifier.RarityFilterPlacementModifier;
import net.minecraft.world.gen.placementmodifier.SquarePlacementModifier;
import net.minecraft.world.gen.placementmodifier.SurfaceThresholdFilterPlacementModifier;

public class UndergroundPlacedFeatures {
   public static final RegistryKey MONSTER_ROOM = PlacedFeatures.of("monster_room");
   public static final RegistryKey MONSTER_ROOM_DEEP = PlacedFeatures.of("monster_room_deep");
   public static final RegistryKey FOSSIL_UPPER = PlacedFeatures.of("fossil_upper");
   public static final RegistryKey FOSSIL_LOWER = PlacedFeatures.of("fossil_lower");
   public static final RegistryKey DRIPSTONE_CLUSTER = PlacedFeatures.of("dripstone_cluster");
   public static final RegistryKey LARGE_DRIPSTONE = PlacedFeatures.of("large_dripstone");
   public static final RegistryKey POINTED_DRIPSTONE = PlacedFeatures.of("pointed_dripstone");
   public static final RegistryKey UNDERWATER_MAGMA = PlacedFeatures.of("underwater_magma");
   public static final RegistryKey GLOW_LICHEN = PlacedFeatures.of("glow_lichen");
   public static final RegistryKey ROOTED_AZALEA_TREE = PlacedFeatures.of("rooted_azalea_tree");
   public static final RegistryKey CAVE_VINES = PlacedFeatures.of("cave_vines");
   public static final RegistryKey LUSH_CAVES_VEGETATION = PlacedFeatures.of("lush_caves_vegetation");
   public static final RegistryKey LUSH_CAVES_CLAY = PlacedFeatures.of("lush_caves_clay");
   public static final RegistryKey LUSH_CAVES_CEILING_VEGETATION = PlacedFeatures.of("lush_caves_ceiling_vegetation");
   public static final RegistryKey SPORE_BLOSSOM = PlacedFeatures.of("spore_blossom");
   public static final RegistryKey CLASSIC_VINES_CAVE_FEATURE = PlacedFeatures.of("classic_vines_cave_feature");
   public static final RegistryKey AMETHYST_GEODE = PlacedFeatures.of("amethyst_geode");
   public static final RegistryKey SCULK_PATCH_DEEP_DARK = PlacedFeatures.of("sculk_patch_deep_dark");
   public static final RegistryKey SCULK_PATCH_ANCIENT_CITY = PlacedFeatures.of("sculk_patch_ancient_city");
   public static final RegistryKey SCULK_VEIN = PlacedFeatures.of("sculk_vein");

   public static void bootstrap(Registerable featureRegisterable) {
      RegistryEntryLookup lv = featureRegisterable.getRegistryLookup(RegistryKeys.CONFIGURED_FEATURE);
      RegistryEntry lv2 = lv.getOrThrow(UndergroundConfiguredFeatures.MONSTER_ROOM);
      RegistryEntry lv3 = lv.getOrThrow(UndergroundConfiguredFeatures.FOSSIL_COAL);
      RegistryEntry lv4 = lv.getOrThrow(UndergroundConfiguredFeatures.FOSSIL_DIAMONDS);
      RegistryEntry lv5 = lv.getOrThrow(UndergroundConfiguredFeatures.DRIPSTONE_CLUSTER);
      RegistryEntry lv6 = lv.getOrThrow(UndergroundConfiguredFeatures.LARGE_DRIPSTONE);
      RegistryEntry lv7 = lv.getOrThrow(UndergroundConfiguredFeatures.POINTED_DRIPSTONE);
      RegistryEntry lv8 = lv.getOrThrow(UndergroundConfiguredFeatures.UNDERWATER_MAGMA);
      RegistryEntry lv9 = lv.getOrThrow(UndergroundConfiguredFeatures.GLOW_LICHEN);
      RegistryEntry lv10 = lv.getOrThrow(UndergroundConfiguredFeatures.ROOTED_AZALEA_TREE);
      RegistryEntry lv11 = lv.getOrThrow(UndergroundConfiguredFeatures.CAVE_VINE);
      RegistryEntry lv12 = lv.getOrThrow(UndergroundConfiguredFeatures.MOSS_PATCH);
      RegistryEntry lv13 = lv.getOrThrow(UndergroundConfiguredFeatures.LUSH_CAVES_CLAY);
      RegistryEntry lv14 = lv.getOrThrow(UndergroundConfiguredFeatures.MOSS_PATCH_CEILING);
      RegistryEntry lv15 = lv.getOrThrow(UndergroundConfiguredFeatures.SPORE_BLOSSOM);
      RegistryEntry lv16 = lv.getOrThrow(VegetationConfiguredFeatures.VINES);
      RegistryEntry lv17 = lv.getOrThrow(UndergroundConfiguredFeatures.AMETHYST_GEODE);
      RegistryEntry lv18 = lv.getOrThrow(UndergroundConfiguredFeatures.SCULK_PATCH_DEEP_DARK);
      RegistryEntry lv19 = lv.getOrThrow(UndergroundConfiguredFeatures.SCULK_PATCH_ANCIENT_CITY);
      RegistryEntry lv20 = lv.getOrThrow(UndergroundConfiguredFeatures.SCULK_VEIN);
      PlacedFeatures.register(featureRegisterable, MONSTER_ROOM, lv2, (PlacementModifier[])(CountPlacementModifier.of(10), SquarePlacementModifier.of(), HeightRangePlacementModifier.uniform(YOffset.fixed(0), YOffset.getTop()), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, MONSTER_ROOM_DEEP, lv2, (PlacementModifier[])(CountPlacementModifier.of(4), SquarePlacementModifier.of(), HeightRangePlacementModifier.uniform(YOffset.aboveBottom(6), YOffset.fixed(-1)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, FOSSIL_UPPER, lv3, (PlacementModifier[])(RarityFilterPlacementModifier.of(64), SquarePlacementModifier.of(), HeightRangePlacementModifier.uniform(YOffset.fixed(0), YOffset.getTop()), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, FOSSIL_LOWER, lv4, (PlacementModifier[])(RarityFilterPlacementModifier.of(64), SquarePlacementModifier.of(), HeightRangePlacementModifier.uniform(YOffset.getBottom(), YOffset.fixed(-8)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, DRIPSTONE_CLUSTER, lv5, (PlacementModifier[])(CountPlacementModifier.of(UniformIntProvider.create(48, 96)), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, LARGE_DRIPSTONE, lv6, (PlacementModifier[])(CountPlacementModifier.of(UniformIntProvider.create(10, 48)), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, POINTED_DRIPSTONE, lv7, (PlacementModifier[])(CountPlacementModifier.of(UniformIntProvider.create(192, 256)), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, CountPlacementModifier.of(UniformIntProvider.create(1, 5)), RandomOffsetPlacementModifier.of(ClampedNormalIntProvider.of(0.0F, 3.0F, -10, 10), ClampedNormalIntProvider.of(0.0F, 0.6F, -2, 2)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, UNDERWATER_MAGMA, lv8, (PlacementModifier[])(CountPlacementModifier.of(UniformIntProvider.create(44, 52)), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, SurfaceThresholdFilterPlacementModifier.of(Heightmap.Type.OCEAN_FLOOR_WG, Integer.MIN_VALUE, -2), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, GLOW_LICHEN, lv9, (PlacementModifier[])(CountPlacementModifier.of(UniformIntProvider.create(104, 157)), PlacedFeatures.BOTTOM_TO_120_RANGE, SquarePlacementModifier.of(), SurfaceThresholdFilterPlacementModifier.of(Heightmap.Type.OCEAN_FLOOR_WG, Integer.MIN_VALUE, -13), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, ROOTED_AZALEA_TREE, lv10, (PlacementModifier[])(CountPlacementModifier.of(UniformIntProvider.create(1, 2)), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, EnvironmentScanPlacementModifier.of(Direction.UP, BlockPredicate.solid(), BlockPredicate.IS_AIR, 12), RandomOffsetPlacementModifier.vertically(ConstantIntProvider.create(-1)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, CAVE_VINES, lv11, (PlacementModifier[])(CountPlacementModifier.of(188), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, EnvironmentScanPlacementModifier.of(Direction.UP, BlockPredicate.hasSturdyFace(Direction.DOWN), BlockPredicate.IS_AIR, 12), RandomOffsetPlacementModifier.vertically(ConstantIntProvider.create(-1)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, LUSH_CAVES_VEGETATION, lv12, (PlacementModifier[])(CountPlacementModifier.of(125), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, EnvironmentScanPlacementModifier.of(Direction.DOWN, BlockPredicate.solid(), BlockPredicate.IS_AIR, 12), RandomOffsetPlacementModifier.vertically(ConstantIntProvider.create(1)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, LUSH_CAVES_CLAY, lv13, (PlacementModifier[])(CountPlacementModifier.of(62), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, EnvironmentScanPlacementModifier.of(Direction.DOWN, BlockPredicate.solid(), BlockPredicate.IS_AIR, 12), RandomOffsetPlacementModifier.vertically(ConstantIntProvider.create(1)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, LUSH_CAVES_CEILING_VEGETATION, lv14, (PlacementModifier[])(CountPlacementModifier.of(125), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, EnvironmentScanPlacementModifier.of(Direction.UP, BlockPredicate.solid(), BlockPredicate.IS_AIR, 12), RandomOffsetPlacementModifier.vertically(ConstantIntProvider.create(-1)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, SPORE_BLOSSOM, lv15, (PlacementModifier[])(CountPlacementModifier.of(25), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, EnvironmentScanPlacementModifier.of(Direction.UP, BlockPredicate.solid(), BlockPredicate.IS_AIR, 12), RandomOffsetPlacementModifier.vertically(ConstantIntProvider.create(-1)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, CLASSIC_VINES_CAVE_FEATURE, lv16, (PlacementModifier[])(CountPlacementModifier.of(256), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, AMETHYST_GEODE, lv17, (PlacementModifier[])(RarityFilterPlacementModifier.of(24), SquarePlacementModifier.of(), HeightRangePlacementModifier.uniform(YOffset.aboveBottom(6), YOffset.fixed(30)), BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, SCULK_PATCH_DEEP_DARK, lv18, (PlacementModifier[])(CountPlacementModifier.of(ConstantIntProvider.create(256)), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, BiomePlacementModifier.of()));
      PlacedFeatures.register(featureRegisterable, SCULK_PATCH_ANCIENT_CITY, lv19, (PlacementModifier[])());
      PlacedFeatures.register(featureRegisterable, SCULK_VEIN, lv20, (PlacementModifier[])(CountPlacementModifier.of(UniformIntProvider.create(204, 250)), SquarePlacementModifier.of(), PlacedFeatures.BOTTOM_TO_120_RANGE, BiomePlacementModifier.of()));
   }
}
